/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateForwarderContractRequest } from '../models';
// @ts-ignore
import { ForwarderContractDeleteResponse } from '../models';
// @ts-ignore
import { ForwarderContractResponse } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
/**
 * ForwarderContractApi - axios parameter creator
 * @export
 */
export const ForwarderContractApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees of the transactions.
         * @summary Create a new forwarder contract.
         * @param {CreateForwarderContractRequest} createForwarderContractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForwarderContract: async (createForwarderContractRequest: CreateForwarderContractRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createForwarderContractRequest' is not null or undefined
            assertParamExists('createForwarderContract', 'createForwarderContractRequest', createForwarderContractRequest)
            const localVarPath = `/v1/forwarder_contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createForwarderContractRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the forwarder contract with the given id.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.
         * @summary Delete forwarder contract by id.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForwarderContract: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteForwarderContract', 'id', id)
            const localVarPath = `/v1/forwarder_contracts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the forwarder contract with the given id.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.
         * @summary Get forwarder contract by id.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForwarderContract: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getForwarderContract', 'id', id)
            const localVarPath = `/v1/forwarder_contracts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.  By default, a maximum of 10 forwarder contract are shown per page.
         * @summary List forwarder contract.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForwarderContracts: async (limit?: number, skip?: number, order?: SortOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/forwarder_contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees of the transactions.
         * @summary Update a forwarder contract.
         * @param {string} id 
         * @param {CreateForwarderContractRequest} createForwarderContractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForwarderContract: async (id: string, createForwarderContractRequest: CreateForwarderContractRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateForwarderContract', 'id', id)
            // verify required parameter 'createForwarderContractRequest' is not null or undefined
            assertParamExists('updateForwarderContract', 'createForwarderContractRequest', createForwarderContractRequest)
            const localVarPath = `/v1/forwarder_contracts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createForwarderContractRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ForwarderContractApi - functional programming interface
 * @export
 */
export const ForwarderContractApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ForwarderContractApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees of the transactions.
         * @summary Create a new forwarder contract.
         * @param {CreateForwarderContractRequest} createForwarderContractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createForwarderContract(createForwarderContractRequest: CreateForwarderContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForwarderContractResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createForwarderContract(createForwarderContractRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete the forwarder contract with the given id.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.
         * @summary Delete forwarder contract by id.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteForwarderContract(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForwarderContractDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteForwarderContract(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the forwarder contract with the given id.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.
         * @summary Get forwarder contract by id.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getForwarderContract(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForwarderContractResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getForwarderContract(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.  By default, a maximum of 10 forwarder contract are shown per page.
         * @summary List forwarder contract.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listForwarderContracts(limit?: number, skip?: number, order?: SortOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ForwarderContractResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listForwarderContracts(limit, skip, order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees of the transactions.
         * @summary Update a forwarder contract.
         * @param {string} id 
         * @param {CreateForwarderContractRequest} createForwarderContractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateForwarderContract(id: string, createForwarderContractRequest: CreateForwarderContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForwarderContractResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateForwarderContract(id, createForwarderContractRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ForwarderContractApi - factory interface
 * @export
 */
export const ForwarderContractApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ForwarderContractApiFp(configuration)
    return {
        /**
         * Create a new forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees of the transactions.
         * @summary Create a new forwarder contract.
         * @param {ForwarderContractApiCreateForwarderContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForwarderContract(requestParameters: ForwarderContractApiCreateForwarderContractRequest, options?: AxiosRequestConfig): AxiosPromise<ForwarderContractResponse> {
            return localVarFp.createForwarderContract(requestParameters.createForwarderContractRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the forwarder contract with the given id.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.
         * @summary Delete forwarder contract by id.
         * @param {ForwarderContractApiDeleteForwarderContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteForwarderContract(requestParameters: ForwarderContractApiDeleteForwarderContractRequest, options?: AxiosRequestConfig): AxiosPromise<ForwarderContractDeleteResponse> {
            return localVarFp.deleteForwarderContract(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the forwarder contract with the given id.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.
         * @summary Get forwarder contract by id.
         * @param {ForwarderContractApiGetForwarderContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForwarderContract(requestParameters: ForwarderContractApiGetForwarderContractRequest, options?: AxiosRequestConfig): AxiosPromise<ForwarderContractResponse> {
            return localVarFp.getForwarderContract(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.  By default, a maximum of 10 forwarder contract are shown per page.
         * @summary List forwarder contract.
         * @param {ForwarderContractApiListForwarderContractsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForwarderContracts(requestParameters: ForwarderContractApiListForwarderContractsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ForwarderContractResponse>> {
            return localVarFp.listForwarderContracts(requestParameters.limit, requestParameters.skip, requestParameters.order, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees of the transactions.
         * @summary Update a forwarder contract.
         * @param {ForwarderContractApiUpdateForwarderContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForwarderContract(requestParameters: ForwarderContractApiUpdateForwarderContractRequest, options?: AxiosRequestConfig): AxiosPromise<ForwarderContractResponse> {
            return localVarFp.updateForwarderContract(requestParameters.id, requestParameters.createForwarderContractRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createForwarderContract operation in ForwarderContractApi.
 * @export
 * @interface ForwarderContractApiCreateForwarderContractRequest
 */
export interface ForwarderContractApiCreateForwarderContractRequest {
    /**
     * 
     * @type {CreateForwarderContractRequest}
     * @memberof ForwarderContractApiCreateForwarderContract
     */
    readonly createForwarderContractRequest: CreateForwarderContractRequest
}

/**
 * Request parameters for deleteForwarderContract operation in ForwarderContractApi.
 * @export
 * @interface ForwarderContractApiDeleteForwarderContractRequest
 */
export interface ForwarderContractApiDeleteForwarderContractRequest {
    /**
     * 
     * @type {string}
     * @memberof ForwarderContractApiDeleteForwarderContract
     */
    readonly id: string
}

/**
 * Request parameters for getForwarderContract operation in ForwarderContractApi.
 * @export
 * @interface ForwarderContractApiGetForwarderContractRequest
 */
export interface ForwarderContractApiGetForwarderContractRequest {
    /**
     * 
     * @type {string}
     * @memberof ForwarderContractApiGetForwarderContract
     */
    readonly id: string
}

/**
 * Request parameters for listForwarderContracts operation in ForwarderContractApi.
 * @export
 * @interface ForwarderContractApiListForwarderContractsRequest
 */
export interface ForwarderContractApiListForwarderContractsRequest {
    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof ForwarderContractApiListForwarderContracts
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof ForwarderContractApiListForwarderContracts
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof ForwarderContractApiListForwarderContracts
     */
    readonly order?: SortOrder
}

/**
 * Request parameters for updateForwarderContract operation in ForwarderContractApi.
 * @export
 * @interface ForwarderContractApiUpdateForwarderContractRequest
 */
export interface ForwarderContractApiUpdateForwarderContractRequest {
    /**
     * 
     * @type {string}
     * @memberof ForwarderContractApiUpdateForwarderContract
     */
    readonly id: string

    /**
     * 
     * @type {CreateForwarderContractRequest}
     * @memberof ForwarderContractApiUpdateForwarderContract
     */
    readonly createForwarderContractRequest: CreateForwarderContractRequest
}

/**
 * ForwarderContractApi - object-oriented interface
 * @export
 * @class ForwarderContractApi
 * @extends {BaseAPI}
 */
export class ForwarderContractApi extends BaseAPI {
    /**
     * Create a new forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees of the transactions.
     * @summary Create a new forwarder contract.
     * @param {ForwarderContractApiCreateForwarderContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForwarderContractApi
     */
    public createForwarderContract(requestParameters: ForwarderContractApiCreateForwarderContractRequest, options?: AxiosRequestConfig) {
        return ForwarderContractApiFp(this.configuration).createForwarderContract(requestParameters.createForwarderContractRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the forwarder contract with the given id.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.
     * @summary Delete forwarder contract by id.
     * @param {ForwarderContractApiDeleteForwarderContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForwarderContractApi
     */
    public deleteForwarderContract(requestParameters: ForwarderContractApiDeleteForwarderContractRequest, options?: AxiosRequestConfig) {
        return ForwarderContractApiFp(this.configuration).deleteForwarderContract(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the forwarder contract with the given id.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.
     * @summary Get forwarder contract by id.
     * @param {ForwarderContractApiGetForwarderContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForwarderContractApi
     */
    public getForwarderContract(requestParameters: ForwarderContractApiGetForwarderContractRequest, options?: AxiosRequestConfig) {
        return ForwarderContractApiFp(this.configuration).getForwarderContract(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees for the transactions.  By default, a maximum of 10 forwarder contract are shown per page.
     * @summary List forwarder contract.
     * @param {ForwarderContractApiListForwarderContractsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForwarderContractApi
     */
    public listForwarderContracts(requestParameters: ForwarderContractApiListForwarderContractsRequest = {}, options?: AxiosRequestConfig) {
        return ForwarderContractApiFp(this.configuration).listForwarderContracts(requestParameters.limit, requestParameters.skip, requestParameters.order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a forwarder contract.  This object represents the forwarder contract that will be used to pay the gas fees of the transactions.
     * @summary Update a forwarder contract.
     * @param {ForwarderContractApiUpdateForwarderContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForwarderContractApi
     */
    public updateForwarderContract(requestParameters: ForwarderContractApiUpdateForwarderContractRequest, options?: AxiosRequestConfig) {
        return ForwarderContractApiFp(this.configuration).updateForwarderContract(requestParameters.id, requestParameters.createForwarderContractRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

