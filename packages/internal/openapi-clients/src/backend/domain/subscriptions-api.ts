/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APITopic } from '../models';
// @ts-ignore
import { BaseEntityListResponseLogResponse } from '../models';
// @ts-ignore
import { BaseEntityListResponseTriggerResponse } from '../models';
// @ts-ignore
import { CreateSubscriptionRequest } from '../models';
// @ts-ignore
import { CreateTriggerRequest } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { SubscriptionDeleteResponse } from '../models';
// @ts-ignore
import { SubscriptionListResponse } from '../models';
// @ts-ignore
import { SubscriptionResponse } from '../models';
// @ts-ignore
import { TestTrigger200Response } from '../models';
// @ts-ignore
import { TriggerDeleteResponse } from '../models';
// @ts-ignore
import { TriggerResponse } from '../models';
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
export const SubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
         * @summary Create subscription for project.
         * @param {CreateSubscriptionRequest} createSubscriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: async (createSubscriptionRequest: CreateSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSubscriptionRequest' is not null or undefined
            assertParamExists('createSubscription', 'createSubscriptionRequest', createSubscriptionRequest)
            const localVarPath = `/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSubscriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
         * @summary Create trigger for subscription.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {CreateTriggerRequest} createTriggerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrigger: async (id: string, createTriggerRequest: CreateTriggerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createTrigger', 'id', id)
            // verify required parameter 'createTriggerRequest' is not null or undefined
            assertParamExists('createTrigger', 'createTriggerRequest', createTriggerRequest)
            const localVarPath = `/v1/subscriptions/{id}/triggers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTriggerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
         * @summary Delete subscription of project.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscription: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSubscription', 'id', id)
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
         * @summary Delete trigger of subscription.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {string} triggerId Specifies the unique subscription ID (starts with sub_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrigger: async (id: string, triggerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrigger', 'id', id)
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('deleteTrigger', 'triggerId', triggerId)
            const localVarPath = `/v1/subscriptions/{id}/triggers/{triggerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"triggerId"}}`, encodeURIComponent(String(triggerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
         * @summary Get subscription of project.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSubscription', 'id', id)
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
         * @summary List subscriptions of project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
         * @summary Get trigger by id.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {string} triggerId Specifies the unique subscription ID (starts with sub_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrigger: async (id: string, triggerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrigger', 'id', id)
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('getTrigger', 'triggerId', triggerId)
            const localVarPath = `/v1/subscriptions/{id}/triggers/{triggerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"triggerId"}}`, encodeURIComponent(String(triggerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
         * @summary List triggers of subscription.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggers: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTriggers', 'id', id)
            const localVarPath = `/v1/subscriptions/{id}/triggers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
         * @summary List logs of triggered subscriptions.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {APITopic} [topic] Specifies the topic of the subscription logs
         * @param {Status} [status] Specifies the status of the subscription logs
         * @param {string} [object] Specifies the object ID of the object related to triggered notification
         * @param {string} [subscription] Specifies the subscription ID
         * @param {string} [trigger] Specifies the trigger ID
         * @param {string} [requestID] Specifies the request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionLogs: async (limit?: number, skip?: number, order?: SortOrder, topic?: APITopic, status?: Status, object?: string, subscription?: string, trigger?: string, requestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (topic !== undefined) {
                localVarQueryParameter['topic'] = topic;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (subscription !== undefined) {
                localVarQueryParameter['subscription'] = subscription;
            }

            if (trigger !== undefined) {
                localVarQueryParameter['trigger'] = trigger;
            }

            if (requestID !== undefined) {
                localVarQueryParameter['requestID'] = requestID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test a trigger  Returns a trigger for the given id.
         * @summary Test trigger by id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTrigger: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export const SubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
         * @summary Create subscription for project.
         * @param {CreateSubscriptionRequest} createSubscriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscription(createSubscriptionRequest: CreateSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubscription(createSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
         * @summary Create trigger for subscription.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {CreateTriggerRequest} createTriggerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrigger(id: string, createTriggerRequest: CreateTriggerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TriggerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrigger(id, createTriggerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
         * @summary Delete subscription of project.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubscription(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubscription(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
         * @summary Delete trigger of subscription.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {string} triggerId Specifies the unique subscription ID (starts with sub_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrigger(id: string, triggerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TriggerDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrigger(id, triggerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
         * @summary Get subscription of project.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscription(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
         * @summary List subscriptions of project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
         * @summary Get trigger by id.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {string} triggerId Specifies the unique subscription ID (starts with sub_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrigger(id: string, triggerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TriggerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrigger(id, triggerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
         * @summary List triggers of subscription.
         * @param {string} id Specifies the unique subscription ID (starts with sub_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTriggers(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseEntityListResponseTriggerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTriggers(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
         * @summary List logs of triggered subscriptions.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {APITopic} [topic] Specifies the topic of the subscription logs
         * @param {Status} [status] Specifies the status of the subscription logs
         * @param {string} [object] Specifies the object ID of the object related to triggered notification
         * @param {string} [subscription] Specifies the subscription ID
         * @param {string} [trigger] Specifies the trigger ID
         * @param {string} [requestID] Specifies the request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionLogs(limit?: number, skip?: number, order?: SortOrder, topic?: APITopic, status?: Status, object?: string, subscription?: string, trigger?: string, requestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseEntityListResponseLogResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionLogs(limit, skip, order, topic, status, object, subscription, trigger, requestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Test a trigger  Returns a trigger for the given id.
         * @summary Test trigger by id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testTrigger(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestTrigger200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testTrigger(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionsApi - factory interface
 * @export
 */
export const SubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionsApiFp(configuration)
    return {
        /**
         * Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
         * @summary Create subscription for project.
         * @param {SubscriptionsApiCreateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(requestParameters: SubscriptionsApiCreateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionResponse> {
            return localVarFp.createSubscription(requestParameters.createSubscriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
         * @summary Create trigger for subscription.
         * @param {SubscriptionsApiCreateTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrigger(requestParameters: SubscriptionsApiCreateTriggerRequest, options?: AxiosRequestConfig): AxiosPromise<TriggerResponse> {
            return localVarFp.createTrigger(requestParameters.id, requestParameters.createTriggerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
         * @summary Delete subscription of project.
         * @param {SubscriptionsApiDeleteSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscription(requestParameters: SubscriptionsApiDeleteSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionDeleteResponse> {
            return localVarFp.deleteSubscription(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
         * @summary Delete trigger of subscription.
         * @param {SubscriptionsApiDeleteTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrigger(requestParameters: SubscriptionsApiDeleteTriggerRequest, options?: AxiosRequestConfig): AxiosPromise<TriggerDeleteResponse> {
            return localVarFp.deleteTrigger(requestParameters.id, requestParameters.triggerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
         * @summary Get subscription of project.
         * @param {SubscriptionsApiGetSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(requestParameters: SubscriptionsApiGetSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionResponse> {
            return localVarFp.getSubscription(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
         * @summary List subscriptions of project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptions(options?: AxiosRequestConfig): AxiosPromise<SubscriptionListResponse> {
            return localVarFp.getSubscriptions(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
         * @summary Get trigger by id.
         * @param {SubscriptionsApiGetTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrigger(requestParameters: SubscriptionsApiGetTriggerRequest, options?: AxiosRequestConfig): AxiosPromise<TriggerResponse> {
            return localVarFp.getTrigger(requestParameters.id, requestParameters.triggerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
         * @summary List triggers of subscription.
         * @param {SubscriptionsApiGetTriggersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTriggers(requestParameters: SubscriptionsApiGetTriggersRequest, options?: AxiosRequestConfig): AxiosPromise<BaseEntityListResponseTriggerResponse> {
            return localVarFp.getTriggers(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
         * @summary List logs of triggered subscriptions.
         * @param {SubscriptionsApiListSubscriptionLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionLogs(requestParameters: SubscriptionsApiListSubscriptionLogsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BaseEntityListResponseLogResponse> {
            return localVarFp.listSubscriptionLogs(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.topic, requestParameters.status, requestParameters.object, requestParameters.subscription, requestParameters.trigger, requestParameters.requestID, options).then((request) => request(axios, basePath));
        },
        /**
         * Test a trigger  Returns a trigger for the given id.
         * @summary Test trigger by id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTrigger(options?: AxiosRequestConfig): AxiosPromise<TestTrigger200Response> {
            return localVarFp.testTrigger(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiCreateSubscriptionRequest
 */
export interface SubscriptionsApiCreateSubscriptionRequest {
    /**
     * 
     * @type {CreateSubscriptionRequest}
     * @memberof SubscriptionsApiCreateSubscription
     */
    readonly createSubscriptionRequest: CreateSubscriptionRequest
}

/**
 * Request parameters for createTrigger operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiCreateTriggerRequest
 */
export interface SubscriptionsApiCreateTriggerRequest {
    /**
     * Specifies the unique subscription ID (starts with sub_).
     * @type {string}
     * @memberof SubscriptionsApiCreateTrigger
     */
    readonly id: string

    /**
     * 
     * @type {CreateTriggerRequest}
     * @memberof SubscriptionsApiCreateTrigger
     */
    readonly createTriggerRequest: CreateTriggerRequest
}

/**
 * Request parameters for deleteSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiDeleteSubscriptionRequest
 */
export interface SubscriptionsApiDeleteSubscriptionRequest {
    /**
     * Specifies the unique subscription ID (starts with sub_).
     * @type {string}
     * @memberof SubscriptionsApiDeleteSubscription
     */
    readonly id: string
}

/**
 * Request parameters for deleteTrigger operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiDeleteTriggerRequest
 */
export interface SubscriptionsApiDeleteTriggerRequest {
    /**
     * Specifies the unique subscription ID (starts with sub_).
     * @type {string}
     * @memberof SubscriptionsApiDeleteTrigger
     */
    readonly id: string

    /**
     * Specifies the unique subscription ID (starts with sub_).
     * @type {string}
     * @memberof SubscriptionsApiDeleteTrigger
     */
    readonly triggerId: string
}

/**
 * Request parameters for getSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiGetSubscriptionRequest
 */
export interface SubscriptionsApiGetSubscriptionRequest {
    /**
     * Specifies the unique subscription ID (starts with sub_).
     * @type {string}
     * @memberof SubscriptionsApiGetSubscription
     */
    readonly id: string
}

/**
 * Request parameters for getTrigger operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiGetTriggerRequest
 */
export interface SubscriptionsApiGetTriggerRequest {
    /**
     * Specifies the unique subscription ID (starts with sub_).
     * @type {string}
     * @memberof SubscriptionsApiGetTrigger
     */
    readonly id: string

    /**
     * Specifies the unique subscription ID (starts with sub_).
     * @type {string}
     * @memberof SubscriptionsApiGetTrigger
     */
    readonly triggerId: string
}

/**
 * Request parameters for getTriggers operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiGetTriggersRequest
 */
export interface SubscriptionsApiGetTriggersRequest {
    /**
     * Specifies the unique subscription ID (starts with sub_).
     * @type {string}
     * @memberof SubscriptionsApiGetTriggers
     */
    readonly id: string
}

/**
 * Request parameters for listSubscriptionLogs operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiListSubscriptionLogsRequest
 */
export interface SubscriptionsApiListSubscriptionLogsRequest {
    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof SubscriptionsApiListSubscriptionLogs
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof SubscriptionsApiListSubscriptionLogs
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof SubscriptionsApiListSubscriptionLogs
     */
    readonly order?: SortOrder

    /**
     * Specifies the topic of the subscription logs
     * @type {APITopic}
     * @memberof SubscriptionsApiListSubscriptionLogs
     */
    readonly topic?: APITopic

    /**
     * Specifies the status of the subscription logs
     * @type {Status}
     * @memberof SubscriptionsApiListSubscriptionLogs
     */
    readonly status?: Status

    /**
     * Specifies the object ID of the object related to triggered notification
     * @type {string}
     * @memberof SubscriptionsApiListSubscriptionLogs
     */
    readonly object?: string

    /**
     * Specifies the subscription ID
     * @type {string}
     * @memberof SubscriptionsApiListSubscriptionLogs
     */
    readonly subscription?: string

    /**
     * Specifies the trigger ID
     * @type {string}
     * @memberof SubscriptionsApiListSubscriptionLogs
     */
    readonly trigger?: string

    /**
     * Specifies the request ID
     * @type {string}
     * @memberof SubscriptionsApiListSubscriptionLogs
     */
    readonly requestID?: string
}

/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
export class SubscriptionsApi extends BaseAPI {
    /**
     * Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
     * @summary Create subscription for project.
     * @param {SubscriptionsApiCreateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public createSubscription(requestParameters: SubscriptionsApiCreateSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).createSubscription(requestParameters.createSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
     * @summary Create trigger for subscription.
     * @param {SubscriptionsApiCreateTriggerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public createTrigger(requestParameters: SubscriptionsApiCreateTriggerRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).createTrigger(requestParameters.id, requestParameters.createTriggerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
     * @summary Delete subscription of project.
     * @param {SubscriptionsApiDeleteSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public deleteSubscription(requestParameters: SubscriptionsApiDeleteSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).deleteSubscription(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
     * @summary Delete trigger of subscription.
     * @param {SubscriptionsApiDeleteTriggerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public deleteTrigger(requestParameters: SubscriptionsApiDeleteTriggerRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).deleteTrigger(requestParameters.id, requestParameters.triggerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
     * @summary Get subscription of project.
     * @param {SubscriptionsApiGetSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public getSubscription(requestParameters: SubscriptionsApiGetSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).getSubscription(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
     * @summary List subscriptions of project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public getSubscriptions(options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).getSubscriptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
     * @summary Get trigger by id.
     * @param {SubscriptionsApiGetTriggerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public getTrigger(requestParameters: SubscriptionsApiGetTriggerRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).getTrigger(requestParameters.id, requestParameters.triggerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
     * @summary List triggers of subscription.
     * @param {SubscriptionsApiGetTriggersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public getTriggers(requestParameters: SubscriptionsApiGetTriggersRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).getTriggers(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
     * @summary List logs of triggered subscriptions.
     * @param {SubscriptionsApiListSubscriptionLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public listSubscriptionLogs(requestParameters: SubscriptionsApiListSubscriptionLogsRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).listSubscriptionLogs(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.topic, requestParameters.status, requestParameters.object, requestParameters.subscription, requestParameters.trigger, requestParameters.requestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test a trigger  Returns a trigger for the given id.
     * @summary Test trigger by id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public testTrigger(options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).testTrigger(options).then((request) => request(this.axios, this.basePath));
    }
}

