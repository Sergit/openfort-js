/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InventoryListResponse } from '../models';
// @ts-ignore
import { InventoryResponse } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
/**
 * InventoriesApi - axios parameter creator
 * @export
 */
export const InventoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Retrieves the cryptocurrency assets of an existing account.
         * @param {string} id Specifies the unique account ID.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<string>} [contractId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountCryptoCurrencyInventory: async (id: string, limit?: number, skip?: number, order?: SortOrder, contractId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAccountCryptoCurrencyInventory', 'id', id)
            const localVarPath = `/v1/accounts/{id}/inventory/cryptocurrency`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (contractId) {
                localVarQueryParameter['contractId'] = contractId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Retrieves the native asset of an existing account.
         * @param {string} id Specifies the unique account ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountNativeInventory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAccountNativeInventory', 'id', id)
            const localVarPath = `/v1/accounts/{id}/inventory/native`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Retrieves the NFT assets of an existing account.
         * @param {string} id Specifies the unique account ID.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<string>} [contractId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountNftInventory: async (id: string, limit?: number, skip?: number, order?: SortOrder, contractId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAccountNftInventory', 'id', id)
            const localVarPath = `/v1/accounts/{id}/inventory/nft`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (contractId) {
                localVarQueryParameter['contractId'] = contractId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Get cryptocurrency list of player.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {number} chainId Filter by chain id.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<string>} [contract] Filter by contract ID (starts with con_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerCryptoCurrencyInventory: async (id: string, chainId: number, limit?: number, skip?: number, order?: SortOrder, contract?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPlayerCryptoCurrencyInventory', 'id', id)
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('getPlayerCryptoCurrencyInventory', 'chainId', chainId)
            const localVarPath = `/v1/players/{id}/inventory/cryptocurrency`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (contract) {
                localVarQueryParameter['contract'] = contract;
            }

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Get native token list of player.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {number} chainId Filter by chain id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerNativeInventory: async (id: string, chainId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPlayerNativeInventory', 'id', id)
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('getPlayerNativeInventory', 'chainId', chainId)
            const localVarPath = `/v1/players/{id}/inventory/native`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Get NFTs list of player.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {number} chainId Filter by chain id.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<string>} [contract] Filter by contract ID (starts with con_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerNftInventory: async (id: string, chainId: number, limit?: number, skip?: number, order?: SortOrder, contract?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPlayerNftInventory', 'id', id)
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('getPlayerNftInventory', 'chainId', chainId)
            const localVarPath = `/v1/players/{id}/inventory/nft`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (contract) {
                localVarQueryParameter['contract'] = contract;
            }

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InventoriesApi - functional programming interface
 * @export
 */
export const InventoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InventoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Retrieves the cryptocurrency assets of an existing account.
         * @param {string} id Specifies the unique account ID.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<string>} [contractId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountCryptoCurrencyInventory(id: string, limit?: number, skip?: number, order?: SortOrder, contractId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountCryptoCurrencyInventory(id, limit, skip, order, contractId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Retrieves the native asset of an existing account.
         * @param {string} id Specifies the unique account ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountNativeInventory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountNativeInventory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Retrieves the NFT assets of an existing account.
         * @param {string} id Specifies the unique account ID.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<string>} [contractId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountNftInventory(id: string, limit?: number, skip?: number, order?: SortOrder, contractId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountNftInventory(id, limit, skip, order, contractId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Get cryptocurrency list of player.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {number} chainId Filter by chain id.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<string>} [contract] Filter by contract ID (starts with con_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerCryptoCurrencyInventory(id: string, chainId: number, limit?: number, skip?: number, order?: SortOrder, contract?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerCryptoCurrencyInventory(id, chainId, limit, skip, order, contract, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Get native token list of player.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {number} chainId Filter by chain id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerNativeInventory(id: string, chainId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerNativeInventory(id, chainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Get NFTs list of player.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {number} chainId Filter by chain id.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<string>} [contract] Filter by contract ID (starts with con_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerNftInventory(id: string, chainId: number, limit?: number, skip?: number, order?: SortOrder, contract?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerNftInventory(id, chainId, limit, skip, order, contract, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InventoriesApi - factory interface
 * @export
 */
export const InventoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InventoriesApiFp(configuration)
    return {
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Retrieves the cryptocurrency assets of an existing account.
         * @param {InventoriesApiGetAccountCryptoCurrencyInventoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountCryptoCurrencyInventory(requestParameters: InventoriesApiGetAccountCryptoCurrencyInventoryRequest, options?: AxiosRequestConfig): AxiosPromise<InventoryListResponse> {
            return localVarFp.getAccountCryptoCurrencyInventory(requestParameters.id, requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.contractId, options).then((request) => request(axios, basePath));
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Retrieves the native asset of an existing account.
         * @param {InventoriesApiGetAccountNativeInventoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountNativeInventory(requestParameters: InventoriesApiGetAccountNativeInventoryRequest, options?: AxiosRequestConfig): AxiosPromise<InventoryResponse> {
            return localVarFp.getAccountNativeInventory(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Retrieves the NFT assets of an existing account.
         * @param {InventoriesApiGetAccountNftInventoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountNftInventory(requestParameters: InventoriesApiGetAccountNftInventoryRequest, options?: AxiosRequestConfig): AxiosPromise<InventoryListResponse> {
            return localVarFp.getAccountNftInventory(requestParameters.id, requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.contractId, options).then((request) => request(axios, basePath));
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Get cryptocurrency list of player.
         * @param {InventoriesApiGetPlayerCryptoCurrencyInventoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerCryptoCurrencyInventory(requestParameters: InventoriesApiGetPlayerCryptoCurrencyInventoryRequest, options?: AxiosRequestConfig): AxiosPromise<InventoryListResponse> {
            return localVarFp.getPlayerCryptoCurrencyInventory(requestParameters.id, requestParameters.chainId, requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.contract, options).then((request) => request(axios, basePath));
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Get native token list of player.
         * @param {InventoriesApiGetPlayerNativeInventoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerNativeInventory(requestParameters: InventoriesApiGetPlayerNativeInventoryRequest, options?: AxiosRequestConfig): AxiosPromise<InventoryResponse> {
            return localVarFp.getPlayerNativeInventory(requestParameters.id, requestParameters.chainId, options).then((request) => request(axios, basePath));
        },
        /**
         * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
         * @summary Get NFTs list of player.
         * @param {InventoriesApiGetPlayerNftInventoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerNftInventory(requestParameters: InventoriesApiGetPlayerNftInventoryRequest, options?: AxiosRequestConfig): AxiosPromise<InventoryListResponse> {
            return localVarFp.getPlayerNftInventory(requestParameters.id, requestParameters.chainId, requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.contract, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccountCryptoCurrencyInventory operation in InventoriesApi.
 * @export
 * @interface InventoriesApiGetAccountCryptoCurrencyInventoryRequest
 */
export interface InventoriesApiGetAccountCryptoCurrencyInventoryRequest {
    /**
     * Specifies the unique account ID.
     * @type {string}
     * @memberof InventoriesApiGetAccountCryptoCurrencyInventory
     */
    readonly id: string

    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof InventoriesApiGetAccountCryptoCurrencyInventory
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof InventoriesApiGetAccountCryptoCurrencyInventory
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof InventoriesApiGetAccountCryptoCurrencyInventory
     */
    readonly order?: SortOrder

    /**
     * 
     * @type {Array<string>}
     * @memberof InventoriesApiGetAccountCryptoCurrencyInventory
     */
    readonly contractId?: Array<string>
}

/**
 * Request parameters for getAccountNativeInventory operation in InventoriesApi.
 * @export
 * @interface InventoriesApiGetAccountNativeInventoryRequest
 */
export interface InventoriesApiGetAccountNativeInventoryRequest {
    /**
     * Specifies the unique account ID.
     * @type {string}
     * @memberof InventoriesApiGetAccountNativeInventory
     */
    readonly id: string
}

/**
 * Request parameters for getAccountNftInventory operation in InventoriesApi.
 * @export
 * @interface InventoriesApiGetAccountNftInventoryRequest
 */
export interface InventoriesApiGetAccountNftInventoryRequest {
    /**
     * Specifies the unique account ID.
     * @type {string}
     * @memberof InventoriesApiGetAccountNftInventory
     */
    readonly id: string

    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof InventoriesApiGetAccountNftInventory
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof InventoriesApiGetAccountNftInventory
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof InventoriesApiGetAccountNftInventory
     */
    readonly order?: SortOrder

    /**
     * 
     * @type {Array<string>}
     * @memberof InventoriesApiGetAccountNftInventory
     */
    readonly contractId?: Array<string>
}

/**
 * Request parameters for getPlayerCryptoCurrencyInventory operation in InventoriesApi.
 * @export
 * @interface InventoriesApiGetPlayerCryptoCurrencyInventoryRequest
 */
export interface InventoriesApiGetPlayerCryptoCurrencyInventoryRequest {
    /**
     * Specifies the unique player ID (starts with pla_).
     * @type {string}
     * @memberof InventoriesApiGetPlayerCryptoCurrencyInventory
     */
    readonly id: string

    /**
     * Filter by chain id.
     * @type {number}
     * @memberof InventoriesApiGetPlayerCryptoCurrencyInventory
     */
    readonly chainId: number

    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof InventoriesApiGetPlayerCryptoCurrencyInventory
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof InventoriesApiGetPlayerCryptoCurrencyInventory
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof InventoriesApiGetPlayerCryptoCurrencyInventory
     */
    readonly order?: SortOrder

    /**
     * Filter by contract ID (starts with con_).
     * @type {Array<string>}
     * @memberof InventoriesApiGetPlayerCryptoCurrencyInventory
     */
    readonly contract?: Array<string>
}

/**
 * Request parameters for getPlayerNativeInventory operation in InventoriesApi.
 * @export
 * @interface InventoriesApiGetPlayerNativeInventoryRequest
 */
export interface InventoriesApiGetPlayerNativeInventoryRequest {
    /**
     * Specifies the unique player ID (starts with pla_).
     * @type {string}
     * @memberof InventoriesApiGetPlayerNativeInventory
     */
    readonly id: string

    /**
     * Filter by chain id.
     * @type {number}
     * @memberof InventoriesApiGetPlayerNativeInventory
     */
    readonly chainId: number
}

/**
 * Request parameters for getPlayerNftInventory operation in InventoriesApi.
 * @export
 * @interface InventoriesApiGetPlayerNftInventoryRequest
 */
export interface InventoriesApiGetPlayerNftInventoryRequest {
    /**
     * Specifies the unique player ID (starts with pla_).
     * @type {string}
     * @memberof InventoriesApiGetPlayerNftInventory
     */
    readonly id: string

    /**
     * Filter by chain id.
     * @type {number}
     * @memberof InventoriesApiGetPlayerNftInventory
     */
    readonly chainId: number

    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof InventoriesApiGetPlayerNftInventory
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof InventoriesApiGetPlayerNftInventory
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof InventoriesApiGetPlayerNftInventory
     */
    readonly order?: SortOrder

    /**
     * Filter by contract ID (starts with con_).
     * @type {Array<string>}
     * @memberof InventoriesApiGetPlayerNftInventory
     */
    readonly contract?: Array<string>
}

/**
 * InventoriesApi - object-oriented interface
 * @export
 * @class InventoriesApi
 * @extends {BaseAPI}
 */
export class InventoriesApi extends BaseAPI {
    /**
     * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
     * @summary Retrieves the cryptocurrency assets of an existing account.
     * @param {InventoriesApiGetAccountCryptoCurrencyInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoriesApi
     */
    public getAccountCryptoCurrencyInventory(requestParameters: InventoriesApiGetAccountCryptoCurrencyInventoryRequest, options?: AxiosRequestConfig) {
        return InventoriesApiFp(this.configuration).getAccountCryptoCurrencyInventory(requestParameters.id, requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.contractId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
     * @summary Retrieves the native asset of an existing account.
     * @param {InventoriesApiGetAccountNativeInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoriesApi
     */
    public getAccountNativeInventory(requestParameters: InventoriesApiGetAccountNativeInventoryRequest, options?: AxiosRequestConfig) {
        return InventoriesApiFp(this.configuration).getAccountNativeInventory(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
     * @summary Retrieves the NFT assets of an existing account.
     * @param {InventoriesApiGetAccountNftInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoriesApi
     */
    public getAccountNftInventory(requestParameters: InventoriesApiGetAccountNftInventoryRequest, options?: AxiosRequestConfig) {
        return InventoriesApiFp(this.configuration).getAccountNftInventory(requestParameters.id, requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.contractId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
     * @summary Get cryptocurrency list of player.
     * @param {InventoriesApiGetPlayerCryptoCurrencyInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoriesApi
     */
    public getPlayerCryptoCurrencyInventory(requestParameters: InventoriesApiGetPlayerCryptoCurrencyInventoryRequest, options?: AxiosRequestConfig) {
        return InventoriesApiFp(this.configuration).getPlayerCryptoCurrencyInventory(requestParameters.id, requestParameters.chainId, requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.contract, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
     * @summary Get native token list of player.
     * @param {InventoriesApiGetPlayerNativeInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoriesApi
     */
    public getPlayerNativeInventory(requestParameters: InventoriesApiGetPlayerNativeInventoryRequest, options?: AxiosRequestConfig) {
        return InventoriesApiFp(this.configuration).getPlayerNativeInventory(requestParameters.id, requestParameters.chainId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For development purposes only.  Under higher load scenarios, this endpoint may be rate limited.
     * @summary Get NFTs list of player.
     * @param {InventoriesApiGetPlayerNftInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoriesApi
     */
    public getPlayerNftInventory(requestParameters: InventoriesApiGetPlayerNftInventoryRequest, options?: AxiosRequestConfig) {
        return InventoriesApiFp(this.configuration).getPlayerNftInventory(requestParameters.id, requestParameters.chainId, requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.contract, options).then((request) => request(this.axios, this.basePath));
    }
}

