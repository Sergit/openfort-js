/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContractDeleteResponse } from '../models';
// @ts-ignore
import { ContractListResponse } from '../models';
// @ts-ignore
import { ContractReadResponse } from '../models';
// @ts-ignore
import { ContractResponse } from '../models';
// @ts-ignore
import { CreateContractRequest } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { UpdateContractRequest } from '../models';
/**
 * ContractsApi - axios parameter creator
 * @export
 */
export const ContractsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new contract to your project in Openfort
         * @summary Create contract object.
         * @param {CreateContractRequest} createContractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContract: async (createContractRequest: CreateContractRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createContractRequest' is not null or undefined
            assertParamExists('createContract', 'createContractRequest', createContractRequest)
            const localVarPath = `/v1/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createContractRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a contract from the project by providing its contract id.
         * @summary Deletes a contract object.
         * @param {string} id Specifies the unique contract ID (starts with con_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContract: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteContract', 'id', id)
            const localVarPath = `/v1/contracts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a contract by providing their contract id.
         * @summary Get a contract.
         * @param {string} id Specifies the unique contract ID (starts with con_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContract: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getContract', 'id', id)
            const localVarPath = `/v1/contracts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of all contracts per project. By default, a maximum of ten contracts are shown.
         * @summary List contracts.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {string} [name] Specifies the name of the contract.
         * @param {boolean} [deleted] Specifies whether to include deleted contracts.
         * @param {number} [chainId] The chain ID of the contract.
         * @param {string} [address] Specifies the address of the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContracts: async (limit?: number, skip?: number, order?: SortOrder, name?: string, deleted?: boolean, chainId?: number, address?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Using this endpoint, you can get the repositories returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
         * @summary Read on chain contract repositories.
         * @param {string} id Specifies the unique contract ID (starts with con_).
         * @param {string} functionName The function name of the contract.
         * @param {Array<any>} [functionArgs] The function arguments of the contract, in string format. Accepts pla_, con_ and acc_ IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readContract: async (id: string, functionName: string, functionArgs?: Array<any>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readContract', 'id', id)
            // verify required parameter 'functionName' is not null or undefined
            assertParamExists('readContract', 'functionName', functionName)
            const localVarPath = `/v1/contracts/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (functionName !== undefined) {
                localVarQueryParameter['functionName'] = functionName;
            }

            if (functionArgs) {
                localVarQueryParameter['functionArgs'] = functionArgs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a contract object.
         * @param {string} id Specifies the unique contract ID (starts with con_).
         * @param {UpdateContractRequest} updateContractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContract: async (id: string, updateContractRequest: UpdateContractRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateContract', 'id', id)
            // verify required parameter 'updateContractRequest' is not null or undefined
            assertParamExists('updateContract', 'updateContractRequest', updateContractRequest)
            const localVarPath = `/v1/contracts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateContractRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractsApi - functional programming interface
 * @export
 */
export const ContractsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new contract to your project in Openfort
         * @summary Create contract object.
         * @param {CreateContractRequest} createContractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContract(createContractRequest: CreateContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContract(createContractRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a contract from the project by providing its contract id.
         * @summary Deletes a contract object.
         * @param {string} id Specifies the unique contract ID (starts with con_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContract(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContract(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a contract by providing their contract id.
         * @summary Get a contract.
         * @param {string} id Specifies the unique contract ID (starts with con_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContract(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContract(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of all contracts per project. By default, a maximum of ten contracts are shown.
         * @summary List contracts.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {string} [name] Specifies the name of the contract.
         * @param {boolean} [deleted] Specifies whether to include deleted contracts.
         * @param {number} [chainId] The chain ID of the contract.
         * @param {string} [address] Specifies the address of the contract.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContracts(limit?: number, skip?: number, order?: SortOrder, name?: string, deleted?: boolean, chainId?: number, address?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContracts(limit, skip, order, name, deleted, chainId, address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Using this endpoint, you can get the repositories returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
         * @summary Read on chain contract repositories.
         * @param {string} id Specifies the unique contract ID (starts with con_).
         * @param {string} functionName The function name of the contract.
         * @param {Array<any>} [functionArgs] The function arguments of the contract, in string format. Accepts pla_, con_ and acc_ IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readContract(id: string, functionName: string, functionArgs?: Array<any>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readContract(id, functionName, functionArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates a contract object.
         * @param {string} id Specifies the unique contract ID (starts with con_).
         * @param {UpdateContractRequest} updateContractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContract(id: string, updateContractRequest: UpdateContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContract(id, updateContractRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractsApi - factory interface
 * @export
 */
export const ContractsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractsApiFp(configuration)
    return {
        /**
         * Add a new contract to your project in Openfort
         * @summary Create contract object.
         * @param {ContractsApiCreateContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContract(requestParameters: ContractsApiCreateContractRequest, options?: AxiosRequestConfig): AxiosPromise<ContractResponse> {
            return localVarFp.createContract(requestParameters.createContractRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a contract from the project by providing its contract id.
         * @summary Deletes a contract object.
         * @param {ContractsApiDeleteContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContract(requestParameters: ContractsApiDeleteContractRequest, options?: AxiosRequestConfig): AxiosPromise<ContractDeleteResponse> {
            return localVarFp.deleteContract(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a contract by providing their contract id.
         * @summary Get a contract.
         * @param {ContractsApiGetContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContract(requestParameters: ContractsApiGetContractRequest, options?: AxiosRequestConfig): AxiosPromise<ContractResponse> {
            return localVarFp.getContract(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List of all contracts per project. By default, a maximum of ten contracts are shown.
         * @summary List contracts.
         * @param {ContractsApiGetContractsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContracts(requestParameters: ContractsApiGetContractsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ContractListResponse> {
            return localVarFp.getContracts(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.name, requestParameters.deleted, requestParameters.chainId, requestParameters.address, options).then((request) => request(axios, basePath));
        },
        /**
         * Using this endpoint, you can get the repositories returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
         * @summary Read on chain contract repositories.
         * @param {ContractsApiReadContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readContract(requestParameters: ContractsApiReadContractRequest, options?: AxiosRequestConfig): AxiosPromise<ContractReadResponse> {
            return localVarFp.readContract(requestParameters.id, requestParameters.functionName, requestParameters.functionArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a contract object.
         * @param {ContractsApiUpdateContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContract(requestParameters: ContractsApiUpdateContractRequest, options?: AxiosRequestConfig): AxiosPromise<ContractResponse> {
            return localVarFp.updateContract(requestParameters.id, requestParameters.updateContractRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createContract operation in ContractsApi.
 * @export
 * @interface ContractsApiCreateContractRequest
 */
export interface ContractsApiCreateContractRequest {
    /**
     * 
     * @type {CreateContractRequest}
     * @memberof ContractsApiCreateContract
     */
    readonly createContractRequest: CreateContractRequest
}

/**
 * Request parameters for deleteContract operation in ContractsApi.
 * @export
 * @interface ContractsApiDeleteContractRequest
 */
export interface ContractsApiDeleteContractRequest {
    /**
     * Specifies the unique contract ID (starts with con_).
     * @type {string}
     * @memberof ContractsApiDeleteContract
     */
    readonly id: string
}

/**
 * Request parameters for getContract operation in ContractsApi.
 * @export
 * @interface ContractsApiGetContractRequest
 */
export interface ContractsApiGetContractRequest {
    /**
     * Specifies the unique contract ID (starts with con_).
     * @type {string}
     * @memberof ContractsApiGetContract
     */
    readonly id: string
}

/**
 * Request parameters for getContracts operation in ContractsApi.
 * @export
 * @interface ContractsApiGetContractsRequest
 */
export interface ContractsApiGetContractsRequest {
    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof ContractsApiGetContracts
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof ContractsApiGetContracts
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof ContractsApiGetContracts
     */
    readonly order?: SortOrder

    /**
     * Specifies the name of the contract.
     * @type {string}
     * @memberof ContractsApiGetContracts
     */
    readonly name?: string

    /**
     * Specifies whether to include deleted contracts.
     * @type {boolean}
     * @memberof ContractsApiGetContracts
     */
    readonly deleted?: boolean

    /**
     * The chain ID of the contract.
     * @type {number}
     * @memberof ContractsApiGetContracts
     */
    readonly chainId?: number

    /**
     * Specifies the address of the contract.
     * @type {string}
     * @memberof ContractsApiGetContracts
     */
    readonly address?: string
}

/**
 * Request parameters for readContract operation in ContractsApi.
 * @export
 * @interface ContractsApiReadContractRequest
 */
export interface ContractsApiReadContractRequest {
    /**
     * Specifies the unique contract ID (starts with con_).
     * @type {string}
     * @memberof ContractsApiReadContract
     */
    readonly id: string

    /**
     * The function name of the contract.
     * @type {string}
     * @memberof ContractsApiReadContract
     */
    readonly functionName: string

    /**
     * The function arguments of the contract, in string format. Accepts pla_, con_ and acc_ IDs.
     * @type {Array<any>}
     * @memberof ContractsApiReadContract
     */
    readonly functionArgs?: Array<any>
}

/**
 * Request parameters for updateContract operation in ContractsApi.
 * @export
 * @interface ContractsApiUpdateContractRequest
 */
export interface ContractsApiUpdateContractRequest {
    /**
     * Specifies the unique contract ID (starts with con_).
     * @type {string}
     * @memberof ContractsApiUpdateContract
     */
    readonly id: string

    /**
     * 
     * @type {UpdateContractRequest}
     * @memberof ContractsApiUpdateContract
     */
    readonly updateContractRequest: UpdateContractRequest
}

/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
export class ContractsApi extends BaseAPI {
    /**
     * Add a new contract to your project in Openfort
     * @summary Create contract object.
     * @param {ContractsApiCreateContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public createContract(requestParameters: ContractsApiCreateContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).createContract(requestParameters.createContractRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a contract from the project by providing its contract id.
     * @summary Deletes a contract object.
     * @param {ContractsApiDeleteContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public deleteContract(requestParameters: ContractsApiDeleteContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).deleteContract(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a contract by providing their contract id.
     * @summary Get a contract.
     * @param {ContractsApiGetContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public getContract(requestParameters: ContractsApiGetContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).getContract(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of all contracts per project. By default, a maximum of ten contracts are shown.
     * @summary List contracts.
     * @param {ContractsApiGetContractsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public getContracts(requestParameters: ContractsApiGetContractsRequest = {}, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).getContracts(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.name, requestParameters.deleted, requestParameters.chainId, requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Using this endpoint, you can get the repositories returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
     * @summary Read on chain contract repositories.
     * @param {ContractsApiReadContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public readContract(requestParameters: ContractsApiReadContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).readContract(requestParameters.id, requestParameters.functionName, requestParameters.functionArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a contract object.
     * @param {ContractsApiUpdateContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public updateContract(requestParameters: ContractsApiUpdateContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).updateContract(requestParameters.id, requestParameters.updateContractRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

