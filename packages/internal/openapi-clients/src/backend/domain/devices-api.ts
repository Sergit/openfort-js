/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BaseEntityListResponseDeviceResponse } from '../models';
// @ts-ignore
import { DeviceCreateRequest } from '../models';
// @ts-ignore
import { DeviceResponse } from '../models';
/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} signerId 
         * @param {DeviceCreateRequest} deviceCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice: async (signerId: string, deviceCreateRequest: DeviceCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signerId' is not null or undefined
            assertParamExists('createDevice', 'signerId', signerId)
            // verify required parameter 'deviceCreateRequest' is not null or undefined
            assertParamExists('createDevice', 'deviceCreateRequest', deviceCreateRequest)
            const localVarPath = `/v2/signers/{signerId}/devices`
                .replace(`{${"signerId"}}`, encodeURIComponent(String(signerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} signerId 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevice: async (signerId: string, deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signerId' is not null or undefined
            assertParamExists('getDevice', 'signerId', signerId)
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getDevice', 'deviceId', deviceId)
            const localVarPath = `/v2/signers/{signerId}/devices/{deviceId}`
                .replace(`{${"signerId"}}`, encodeURIComponent(String(signerId)))
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} signerId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {ListDevicesOrderEnum} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices: async (signerId: string, limit?: number, skip?: number, order?: ListDevicesOrderEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signerId' is not null or undefined
            assertParamExists('listDevices', 'signerId', signerId)
            const localVarPath = `/v2/signers/{signerId}/devices`
                .replace(`{${"signerId"}}`, encodeURIComponent(String(signerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} signerId 
         * @param {DeviceCreateRequest} deviceCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDevice(signerId: string, deviceCreateRequest: DeviceCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDevice(signerId, deviceCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} signerId 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevice(signerId: string, deviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDevice(signerId, deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} signerId 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {ListDevicesOrderEnum} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDevices(signerId: string, limit?: number, skip?: number, order?: ListDevicesOrderEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseEntityListResponseDeviceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDevices(signerId, limit, skip, order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * 
         * @param {DevicesApiCreateDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice(requestParameters: DevicesApiCreateDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceResponse> {
            return localVarFp.createDevice(requestParameters.signerId, requestParameters.deviceCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DevicesApiGetDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevice(requestParameters: DevicesApiGetDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceResponse> {
            return localVarFp.getDevice(requestParameters.signerId, requestParameters.deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DevicesApiListDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices(requestParameters: DevicesApiListDevicesRequest, options?: AxiosRequestConfig): AxiosPromise<BaseEntityListResponseDeviceResponse> {
            return localVarFp.listDevices(requestParameters.signerId, requestParameters.limit, requestParameters.skip, requestParameters.order, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDevice operation in DevicesApi.
 * @export
 * @interface DevicesApiCreateDeviceRequest
 */
export interface DevicesApiCreateDeviceRequest {
    /**
     * 
     * @type {string}
     * @memberof DevicesApiCreateDevice
     */
    readonly signerId: string

    /**
     * 
     * @type {DeviceCreateRequest}
     * @memberof DevicesApiCreateDevice
     */
    readonly deviceCreateRequest: DeviceCreateRequest
}

/**
 * Request parameters for getDevice operation in DevicesApi.
 * @export
 * @interface DevicesApiGetDeviceRequest
 */
export interface DevicesApiGetDeviceRequest {
    /**
     * 
     * @type {string}
     * @memberof DevicesApiGetDevice
     */
    readonly signerId: string

    /**
     * 
     * @type {string}
     * @memberof DevicesApiGetDevice
     */
    readonly deviceId: string
}

/**
 * Request parameters for listDevices operation in DevicesApi.
 * @export
 * @interface DevicesApiListDevicesRequest
 */
export interface DevicesApiListDevicesRequest {
    /**
     * 
     * @type {string}
     * @memberof DevicesApiListDevices
     */
    readonly signerId: string

    /**
     * 
     * @type {number}
     * @memberof DevicesApiListDevices
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof DevicesApiListDevices
     */
    readonly skip?: number

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof DevicesApiListDevices
     */
    readonly order?: ListDevicesOrderEnum
}

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
    /**
     * 
     * @param {DevicesApiCreateDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public createDevice(requestParameters: DevicesApiCreateDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).createDevice(requestParameters.signerId, requestParameters.deviceCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DevicesApiGetDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public getDevice(requestParameters: DevicesApiGetDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).getDevice(requestParameters.signerId, requestParameters.deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DevicesApiListDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public listDevices(requestParameters: DevicesApiListDevicesRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).listDevices(requestParameters.signerId, requestParameters.limit, requestParameters.skip, requestParameters.order, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListDevicesOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListDevicesOrderEnum = typeof ListDevicesOrderEnum[keyof typeof ListDevicesOrderEnum];
