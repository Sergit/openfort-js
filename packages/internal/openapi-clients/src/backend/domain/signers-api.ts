/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateSignerRequest } from '../models';
// @ts-ignore
import { ListResponseSigner } from '../models';
// @ts-ignore
import { SignerResponse } from '../models';
/**
 * SignersApi - axios parameter creator
 * @export
 */
export const SignersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateSignerRequest} createSignerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSigner: async (createSignerRequest: CreateSignerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSignerRequest' is not null or undefined
            assertParamExists('createSigner', 'createSignerRequest', createSignerRequest)
            const localVarPath = `/v2/signers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSignerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} signerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSigner: async (signerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signerId' is not null or undefined
            assertParamExists('exportSigner', 'signerId', signerId)
            const localVarPath = `/v2/signers/{signerId}/export`
                .replace(`{${"signerId"}}`, encodeURIComponent(String(signerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} signerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigner: async (signerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signerId' is not null or undefined
            assertParamExists('getSigner', 'signerId', signerId)
            const localVarPath = `/v2/signers/{signerId}`
                .replace(`{${"signerId"}}`, encodeURIComponent(String(signerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {ListSignersOrderEnum} [order] 
         * @param {string} [signerType] 
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSigners: async (limit?: number, skip?: number, order?: ListSignersOrderEnum, signerType?: string, account?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/signers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (signerType !== undefined) {
                localVarQueryParameter['signerType'] = signerType;
            }

            if (account !== undefined) {
                localVarQueryParameter['account'] = account;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignersApi - functional programming interface
 * @export
 */
export const SignersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateSignerRequest} createSignerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSigner(createSignerRequest: CreateSignerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSigner(createSignerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} signerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSigner(signerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportSigner(signerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} signerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSigner(signerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSigner(signerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [skip] 
         * @param {ListSignersOrderEnum} [order] 
         * @param {string} [signerType] 
         * @param {string} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSigners(limit?: number, skip?: number, order?: ListSignersOrderEnum, signerType?: string, account?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseSigner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSigners(limit, skip, order, signerType, account, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignersApi - factory interface
 * @export
 */
export const SignersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignersApiFp(configuration)
    return {
        /**
         * 
         * @param {SignersApiCreateSignerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSigner(requestParameters: SignersApiCreateSignerRequest, options?: AxiosRequestConfig): AxiosPromise<SignerResponse> {
            return localVarFp.createSigner(requestParameters.createSignerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignersApiExportSignerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSigner(requestParameters: SignersApiExportSignerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.exportSigner(requestParameters.signerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignersApiGetSignerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigner(requestParameters: SignersApiGetSignerRequest, options?: AxiosRequestConfig): AxiosPromise<SignerResponse> {
            return localVarFp.getSigner(requestParameters.signerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignersApiListSignersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSigners(requestParameters: SignersApiListSignersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListResponseSigner> {
            return localVarFp.listSigners(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.signerType, requestParameters.account, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSigner operation in SignersApi.
 * @export
 * @interface SignersApiCreateSignerRequest
 */
export interface SignersApiCreateSignerRequest {
    /**
     * 
     * @type {CreateSignerRequest}
     * @memberof SignersApiCreateSigner
     */
    readonly createSignerRequest: CreateSignerRequest
}

/**
 * Request parameters for exportSigner operation in SignersApi.
 * @export
 * @interface SignersApiExportSignerRequest
 */
export interface SignersApiExportSignerRequest {
    /**
     * 
     * @type {string}
     * @memberof SignersApiExportSigner
     */
    readonly signerId: string
}

/**
 * Request parameters for getSigner operation in SignersApi.
 * @export
 * @interface SignersApiGetSignerRequest
 */
export interface SignersApiGetSignerRequest {
    /**
     * 
     * @type {string}
     * @memberof SignersApiGetSigner
     */
    readonly signerId: string
}

/**
 * Request parameters for listSigners operation in SignersApi.
 * @export
 * @interface SignersApiListSignersRequest
 */
export interface SignersApiListSignersRequest {
    /**
     * 
     * @type {number}
     * @memberof SignersApiListSigners
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof SignersApiListSigners
     */
    readonly skip?: number

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof SignersApiListSigners
     */
    readonly order?: ListSignersOrderEnum

    /**
     * 
     * @type {string}
     * @memberof SignersApiListSigners
     */
    readonly signerType?: string

    /**
     * 
     * @type {string}
     * @memberof SignersApiListSigners
     */
    readonly account?: string
}

/**
 * SignersApi - object-oriented interface
 * @export
 * @class SignersApi
 * @extends {BaseAPI}
 */
export class SignersApi extends BaseAPI {
    /**
     * 
     * @param {SignersApiCreateSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignersApi
     */
    public createSigner(requestParameters: SignersApiCreateSignerRequest, options?: AxiosRequestConfig) {
        return SignersApiFp(this.configuration).createSigner(requestParameters.createSignerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignersApiExportSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignersApi
     */
    public exportSigner(requestParameters: SignersApiExportSignerRequest, options?: AxiosRequestConfig) {
        return SignersApiFp(this.configuration).exportSigner(requestParameters.signerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignersApiGetSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignersApi
     */
    public getSigner(requestParameters: SignersApiGetSignerRequest, options?: AxiosRequestConfig) {
        return SignersApiFp(this.configuration).getSigner(requestParameters.signerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignersApiListSignersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignersApi
     */
    public listSigners(requestParameters: SignersApiListSignersRequest = {}, options?: AxiosRequestConfig) {
        return SignersApiFp(this.configuration).listSigners(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.signerType, requestParameters.account, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListSignersOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListSignersOrderEnum = typeof ListSignersOrderEnum[keyof typeof ListSignersOrderEnum];
