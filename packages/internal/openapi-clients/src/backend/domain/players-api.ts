/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PlayerCancelTransferOwnershipRequest } from '../models';
// @ts-ignore
import { PlayerCreateRequest } from '../models';
// @ts-ignore
import { PlayerDeleteResponse } from '../models';
// @ts-ignore
import { PlayerListResponse } from '../models';
// @ts-ignore
import { PlayerResponse } from '../models';
// @ts-ignore
import { PlayerResponseExpandable } from '../models';
// @ts-ignore
import { PlayerTransferOwnershipRequest } from '../models';
// @ts-ignore
import { PlayerUpdateRequest } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { TransactionIntentResponse } from '../models';
/**
 * PlayersApi - axios parameter creator
 * @export
 */
export const PlayersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to cancel a pending transfer of ownership.
         * @summary Cancel request to transfer ownership of a player.
         * @param {string} id 
         * @param {PlayerCancelTransferOwnershipRequest} playerCancelTransferOwnershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTransferAccountOwnership: async (id: string, playerCancelTransferOwnershipRequest: PlayerCancelTransferOwnershipRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelTransferAccountOwnership', 'id', id)
            // verify required parameter 'playerCancelTransferOwnershipRequest' is not null or undefined
            assertParamExists('cancelTransferAccountOwnership', 'playerCancelTransferOwnershipRequest', playerCancelTransferOwnershipRequest)
            const localVarPath = `/v1/players/{id}/cancel_transfer_ownership`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerCancelTransferOwnershipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a player.
         * @summary Create a player object.
         * @param {PlayerCreateRequest} playerCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlayer: async (playerCreateRequest: PlayerCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playerCreateRequest' is not null or undefined
            assertParamExists('createPlayer', 'playerCreateRequest', playerCreateRequest)
            const localVarPath = `/v1/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * It will delete all linked accounts the player is authenticated with. If the player has a linked embedded signer, it will be deleted as well.
         * @summary Deletes a player object.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePlayer', 'id', id)
            const localVarPath = `/v1/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of a player that has previously been created.  Returns the latest 10 transaction intents that were created with this player.
         * @summary Retrieves the details of an existing player.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {Array<PlayerResponseExpandable>} [expand] Specifies the expandable fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer: async (id: string, expand?: Array<PlayerResponseExpandable>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPlayer', 'id', id)
            const localVarPath = `/v1/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By default, a maximum of 10 players are shown.  Returns the latest 10 transaction intents that were created with each player.
         * @summary List players.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<PlayerResponseExpandable>} [expand] Specifies the fields to expand in the response.
         * @param {string} [name] Filter by player name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayers: async (limit?: number, skip?: number, order?: SortOrder, expand?: Array<PlayerResponseExpandable>, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling `acceptOwnership()` in the smart contract account.
         * @summary Request transfer ownership of a player.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {PlayerTransferOwnershipRequest} playerTransferOwnershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTransferAccountOwnership: async (id: string, playerTransferOwnershipRequest: PlayerTransferOwnershipRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('requestTransferAccountOwnership', 'id', id)
            // verify required parameter 'playerTransferOwnershipRequest' is not null or undefined
            assertParamExists('requestTransferAccountOwnership', 'playerTransferOwnershipRequest', playerTransferOwnershipRequest)
            const localVarPath = `/v1/players/{id}/request_transfer_ownership`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerTransferOwnershipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the specified player by setting the values of the parameters passed.
         * @summary Updates a player object.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {PlayerUpdateRequest} playerUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayer: async (id: string, playerUpdateRequest: PlayerUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePlayer', 'id', id)
            // verify required parameter 'playerUpdateRequest' is not null or undefined
            assertParamExists('updatePlayer', 'playerUpdateRequest', playerUpdateRequest)
            const localVarPath = `/v1/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayersApi - functional programming interface
 * @export
 */
export const PlayersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayersApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to cancel a pending transfer of ownership.
         * @summary Cancel request to transfer ownership of a player.
         * @param {string} id 
         * @param {PlayerCancelTransferOwnershipRequest} playerCancelTransferOwnershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelTransferAccountOwnership(id: string, playerCancelTransferOwnershipRequest: PlayerCancelTransferOwnershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionIntentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelTransferAccountOwnership(id, playerCancelTransferOwnershipRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a player.
         * @summary Create a player object.
         * @param {PlayerCreateRequest} playerCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlayer(playerCreateRequest: PlayerCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlayer(playerCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * It will delete all linked accounts the player is authenticated with. If the player has a linked embedded signer, it will be deleted as well.
         * @summary Deletes a player object.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlayer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlayer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of a player that has previously been created.  Returns the latest 10 transaction intents that were created with this player.
         * @summary Retrieves the details of an existing player.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {Array<PlayerResponseExpandable>} [expand] Specifies the expandable fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayer(id: string, expand?: Array<PlayerResponseExpandable>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayer(id, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By default, a maximum of 10 players are shown.  Returns the latest 10 transaction intents that were created with each player.
         * @summary List players.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<PlayerResponseExpandable>} [expand] Specifies the fields to expand in the response.
         * @param {string} [name] Filter by player name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayers(limit?: number, skip?: number, order?: SortOrder, expand?: Array<PlayerResponseExpandable>, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayers(limit, skip, order, expand, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling `acceptOwnership()` in the smart contract account.
         * @summary Request transfer ownership of a player.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {PlayerTransferOwnershipRequest} playerTransferOwnershipRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestTransferAccountOwnership(id: string, playerTransferOwnershipRequest: PlayerTransferOwnershipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionIntentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestTransferAccountOwnership(id, playerTransferOwnershipRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the specified player by setting the values of the parameters passed.
         * @summary Updates a player object.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {PlayerUpdateRequest} playerUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlayer(id: string, playerUpdateRequest: PlayerUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlayer(id, playerUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlayersApi - factory interface
 * @export
 */
export const PlayersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayersApiFp(configuration)
    return {
        /**
         * This endpoint allows you to cancel a pending transfer of ownership.
         * @summary Cancel request to transfer ownership of a player.
         * @param {PlayersApiCancelTransferAccountOwnershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTransferAccountOwnership(requestParameters: PlayersApiCancelTransferAccountOwnershipRequest, options?: AxiosRequestConfig): AxiosPromise<TransactionIntentResponse> {
            return localVarFp.cancelTransferAccountOwnership(requestParameters.id, requestParameters.playerCancelTransferOwnershipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a player.
         * @summary Create a player object.
         * @param {PlayersApiCreatePlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlayer(requestParameters: PlayersApiCreatePlayerRequest, options?: AxiosRequestConfig): AxiosPromise<PlayerResponse> {
            return localVarFp.createPlayer(requestParameters.playerCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * It will delete all linked accounts the player is authenticated with. If the player has a linked embedded signer, it will be deleted as well.
         * @summary Deletes a player object.
         * @param {PlayersApiDeletePlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlayer(requestParameters: PlayersApiDeletePlayerRequest, options?: AxiosRequestConfig): AxiosPromise<PlayerDeleteResponse> {
            return localVarFp.deletePlayer(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of a player that has previously been created.  Returns the latest 10 transaction intents that were created with this player.
         * @summary Retrieves the details of an existing player.
         * @param {PlayersApiGetPlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayer(requestParameters: PlayersApiGetPlayerRequest, options?: AxiosRequestConfig): AxiosPromise<PlayerResponse> {
            return localVarFp.getPlayer(requestParameters.id, requestParameters.expand, options).then((request) => request(axios, basePath));
        },
        /**
         * By default, a maximum of 10 players are shown.  Returns the latest 10 transaction intents that were created with each player.
         * @summary List players.
         * @param {PlayersApiGetPlayersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayers(requestParameters: PlayersApiGetPlayersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PlayerListResponse> {
            return localVarFp.getPlayers(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.expand, requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling `acceptOwnership()` in the smart contract account.
         * @summary Request transfer ownership of a player.
         * @param {PlayersApiRequestTransferAccountOwnershipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTransferAccountOwnership(requestParameters: PlayersApiRequestTransferAccountOwnershipRequest, options?: AxiosRequestConfig): AxiosPromise<TransactionIntentResponse> {
            return localVarFp.requestTransferAccountOwnership(requestParameters.id, requestParameters.playerTransferOwnershipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the specified player by setting the values of the parameters passed.
         * @summary Updates a player object.
         * @param {PlayersApiUpdatePlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayer(requestParameters: PlayersApiUpdatePlayerRequest, options?: AxiosRequestConfig): AxiosPromise<PlayerResponse> {
            return localVarFp.updatePlayer(requestParameters.id, requestParameters.playerUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelTransferAccountOwnership operation in PlayersApi.
 * @export
 * @interface PlayersApiCancelTransferAccountOwnershipRequest
 */
export interface PlayersApiCancelTransferAccountOwnershipRequest {
    /**
     * 
     * @type {string}
     * @memberof PlayersApiCancelTransferAccountOwnership
     */
    readonly id: string

    /**
     * 
     * @type {PlayerCancelTransferOwnershipRequest}
     * @memberof PlayersApiCancelTransferAccountOwnership
     */
    readonly playerCancelTransferOwnershipRequest: PlayerCancelTransferOwnershipRequest
}

/**
 * Request parameters for createPlayer operation in PlayersApi.
 * @export
 * @interface PlayersApiCreatePlayerRequest
 */
export interface PlayersApiCreatePlayerRequest {
    /**
     * 
     * @type {PlayerCreateRequest}
     * @memberof PlayersApiCreatePlayer
     */
    readonly playerCreateRequest: PlayerCreateRequest
}

/**
 * Request parameters for deletePlayer operation in PlayersApi.
 * @export
 * @interface PlayersApiDeletePlayerRequest
 */
export interface PlayersApiDeletePlayerRequest {
    /**
     * Specifies the unique player ID (starts with pla_).
     * @type {string}
     * @memberof PlayersApiDeletePlayer
     */
    readonly id: string
}

/**
 * Request parameters for getPlayer operation in PlayersApi.
 * @export
 * @interface PlayersApiGetPlayerRequest
 */
export interface PlayersApiGetPlayerRequest {
    /**
     * Specifies the unique player ID (starts with pla_).
     * @type {string}
     * @memberof PlayersApiGetPlayer
     */
    readonly id: string

    /**
     * Specifies the expandable fields.
     * @type {Array<PlayerResponseExpandable>}
     * @memberof PlayersApiGetPlayer
     */
    readonly expand?: Array<PlayerResponseExpandable>
}

/**
 * Request parameters for getPlayers operation in PlayersApi.
 * @export
 * @interface PlayersApiGetPlayersRequest
 */
export interface PlayersApiGetPlayersRequest {
    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof PlayersApiGetPlayers
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof PlayersApiGetPlayers
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof PlayersApiGetPlayers
     */
    readonly order?: SortOrder

    /**
     * Specifies the fields to expand in the response.
     * @type {Array<PlayerResponseExpandable>}
     * @memberof PlayersApiGetPlayers
     */
    readonly expand?: Array<PlayerResponseExpandable>

    /**
     * Filter by player name.
     * @type {string}
     * @memberof PlayersApiGetPlayers
     */
    readonly name?: string
}

/**
 * Request parameters for requestTransferAccountOwnership operation in PlayersApi.
 * @export
 * @interface PlayersApiRequestTransferAccountOwnershipRequest
 */
export interface PlayersApiRequestTransferAccountOwnershipRequest {
    /**
     * Specifies the unique player ID (starts with pla_).
     * @type {string}
     * @memberof PlayersApiRequestTransferAccountOwnership
     */
    readonly id: string

    /**
     * 
     * @type {PlayerTransferOwnershipRequest}
     * @memberof PlayersApiRequestTransferAccountOwnership
     */
    readonly playerTransferOwnershipRequest: PlayerTransferOwnershipRequest
}

/**
 * Request parameters for updatePlayer operation in PlayersApi.
 * @export
 * @interface PlayersApiUpdatePlayerRequest
 */
export interface PlayersApiUpdatePlayerRequest {
    /**
     * Specifies the unique player ID (starts with pla_).
     * @type {string}
     * @memberof PlayersApiUpdatePlayer
     */
    readonly id: string

    /**
     * 
     * @type {PlayerUpdateRequest}
     * @memberof PlayersApiUpdatePlayer
     */
    readonly playerUpdateRequest: PlayerUpdateRequest
}

/**
 * PlayersApi - object-oriented interface
 * @export
 * @class PlayersApi
 * @extends {BaseAPI}
 */
export class PlayersApi extends BaseAPI {
    /**
     * This endpoint allows you to cancel a pending transfer of ownership.
     * @summary Cancel request to transfer ownership of a player.
     * @param {PlayersApiCancelTransferAccountOwnershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public cancelTransferAccountOwnership(requestParameters: PlayersApiCancelTransferAccountOwnershipRequest, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).cancelTransferAccountOwnership(requestParameters.id, requestParameters.playerCancelTransferOwnershipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a player.
     * @summary Create a player object.
     * @param {PlayersApiCreatePlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public createPlayer(requestParameters: PlayersApiCreatePlayerRequest, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).createPlayer(requestParameters.playerCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * It will delete all linked accounts the player is authenticated with. If the player has a linked embedded signer, it will be deleted as well.
     * @summary Deletes a player object.
     * @param {PlayersApiDeletePlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public deletePlayer(requestParameters: PlayersApiDeletePlayerRequest, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).deletePlayer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of a player that has previously been created.  Returns the latest 10 transaction intents that were created with this player.
     * @summary Retrieves the details of an existing player.
     * @param {PlayersApiGetPlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public getPlayer(requestParameters: PlayersApiGetPlayerRequest, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).getPlayer(requestParameters.id, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By default, a maximum of 10 players are shown.  Returns the latest 10 transaction intents that were created with each player.
     * @summary List players.
     * @param {PlayersApiGetPlayersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public getPlayers(requestParameters: PlayersApiGetPlayersRequest = {}, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).getPlayers(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.expand, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling `acceptOwnership()` in the smart contract account.
     * @summary Request transfer ownership of a player.
     * @param {PlayersApiRequestTransferAccountOwnershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public requestTransferAccountOwnership(requestParameters: PlayersApiRequestTransferAccountOwnershipRequest, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).requestTransferAccountOwnership(requestParameters.id, requestParameters.playerTransferOwnershipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the specified player by setting the values of the parameters passed.
     * @summary Updates a player object.
     * @param {PlayersApiUpdatePlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public updatePlayer(requestParameters: PlayersApiUpdatePlayerRequest, options?: AxiosRequestConfig) {
        return PlayersApiFp(this.configuration).updatePlayer(requestParameters.id, requestParameters.playerUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

