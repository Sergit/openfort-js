/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthMigrationListResponse } from '../models';
// @ts-ignore
import { AuthMigrationResponse } from '../models';
// @ts-ignore
import { AuthMigrationStatus } from '../models';
// @ts-ignore
import { AuthProvider } from '../models';
// @ts-ignore
import { AuthProviderListResponse } from '../models';
// @ts-ignore
import { CreateMigrationRequest } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { UpdateMigrationRequest } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new auth migration.
         * @summary Create a new auth migration.
         * @param {CreateMigrationRequest} createMigrationRequest Specifies the auth migration request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthMigration: async (createMigrationRequest: CreateMigrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMigrationRequest' is not null or undefined
            assertParamExists('createAuthMigration', 'createMigrationRequest', createMigrationRequest)
            const localVarPath = `/iam/v1/migrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMigrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status of an auth migration.
         * @summary Get the status of an auth migration.
         * @param {string} id Specifies the auth migration ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthMigration: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAuthMigration', 'id', id)
            const localVarPath = `/iam/v1/migrations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List configured auth methods for the current project environment.
         * @summary List of auth configurations.
         * @param {boolean} [enabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (enabled?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iam/v1/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all auth migrations.
         * @summary List all auth migrations.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {AuthProvider} [sourceProvider] Source provider
         * @param {AuthProvider} [destinationProvider] Destination provider
         * @param {Array<AuthMigrationStatus>} [status] Status of the migration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthMigration: async (limit?: number, skip?: number, order?: SortOrder, sourceProvider?: AuthProvider, destinationProvider?: AuthProvider, status?: Array<AuthMigrationStatus>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iam/v1/migrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sourceProvider !== undefined) {
                localVarQueryParameter['sourceProvider'] = sourceProvider;
            }

            if (destinationProvider !== undefined) {
                localVarQueryParameter['destinationProvider'] = destinationProvider;
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of an auth migration.
         * @summary Update the status of an auth migration.
         * @param {string} id Specifies the auth migration ID.
         * @param {UpdateMigrationRequest} updateMigrationRequest Specifies the update migration request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthMigration: async (id: string, updateMigrationRequest: UpdateMigrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAuthMigration', 'id', id)
            // verify required parameter 'updateMigrationRequest' is not null or undefined
            assertParamExists('updateAuthMigration', 'updateMigrationRequest', updateMigrationRequest)
            const localVarPath = `/iam/v1/migrations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMigrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new auth migration.
         * @summary Create a new auth migration.
         * @param {CreateMigrationRequest} createMigrationRequest Specifies the auth migration request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthMigration(createMigrationRequest: CreateMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthMigrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthMigration(createMigrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status of an auth migration.
         * @summary Get the status of an auth migration.
         * @param {string} id Specifies the auth migration ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthMigration(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthMigrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthMigration(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List configured auth methods for the current project environment.
         * @summary List of auth configurations.
         * @param {boolean} [enabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(enabled?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProviderListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(enabled, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all auth migrations.
         * @summary List all auth migrations.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {AuthProvider} [sourceProvider] Source provider
         * @param {AuthProvider} [destinationProvider] Destination provider
         * @param {Array<AuthMigrationStatus>} [status] Status of the migration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthMigration(limit?: number, skip?: number, order?: SortOrder, sourceProvider?: AuthProvider, destinationProvider?: AuthProvider, status?: Array<AuthMigrationStatus>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthMigrationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthMigration(limit, skip, order, sourceProvider, destinationProvider, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the status of an auth migration.
         * @summary Update the status of an auth migration.
         * @param {string} id Specifies the auth migration ID.
         * @param {UpdateMigrationRequest} updateMigrationRequest Specifies the update migration request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthMigration(id: string, updateMigrationRequest: UpdateMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthMigrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthMigration(id, updateMigrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Create a new auth migration.
         * @summary Create a new auth migration.
         * @param {DefaultApiCreateAuthMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthMigration(requestParameters: DefaultApiCreateAuthMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<AuthMigrationResponse> {
            return localVarFp.createAuthMigration(requestParameters.createMigrationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status of an auth migration.
         * @summary Get the status of an auth migration.
         * @param {DefaultApiGetAuthMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthMigration(requestParameters: DefaultApiGetAuthMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<AuthMigrationResponse> {
            return localVarFp.getAuthMigration(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List configured auth methods for the current project environment.
         * @summary List of auth configurations.
         * @param {DefaultApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: DefaultApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AuthProviderListResponse> {
            return localVarFp.list(requestParameters.enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * List all auth migrations.
         * @summary List all auth migrations.
         * @param {DefaultApiListAuthMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthMigration(requestParameters: DefaultApiListAuthMigrationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AuthMigrationListResponse> {
            return localVarFp.listAuthMigration(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.sourceProvider, requestParameters.destinationProvider, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of an auth migration.
         * @summary Update the status of an auth migration.
         * @param {DefaultApiUpdateAuthMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthMigration(requestParameters: DefaultApiUpdateAuthMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<AuthMigrationResponse> {
            return localVarFp.updateAuthMigration(requestParameters.id, requestParameters.updateMigrationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAuthMigration operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateAuthMigrationRequest
 */
export interface DefaultApiCreateAuthMigrationRequest {
    /**
     * Specifies the auth migration request.
     * @type {CreateMigrationRequest}
     * @memberof DefaultApiCreateAuthMigration
     */
    readonly createMigrationRequest: CreateMigrationRequest
}

/**
 * Request parameters for getAuthMigration operation in DefaultApi.
 * @export
 * @interface DefaultApiGetAuthMigrationRequest
 */
export interface DefaultApiGetAuthMigrationRequest {
    /**
     * Specifies the auth migration ID.
     * @type {string}
     * @memberof DefaultApiGetAuthMigration
     */
    readonly id: string
}

/**
 * Request parameters for list operation in DefaultApi.
 * @export
 * @interface DefaultApiListRequest
 */
export interface DefaultApiListRequest {
    /**
     * 
     * @type {boolean}
     * @memberof DefaultApiList
     */
    readonly enabled?: boolean
}

/**
 * Request parameters for listAuthMigration operation in DefaultApi.
 * @export
 * @interface DefaultApiListAuthMigrationRequest
 */
export interface DefaultApiListAuthMigrationRequest {
    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof DefaultApiListAuthMigration
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof DefaultApiListAuthMigration
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof DefaultApiListAuthMigration
     */
    readonly order?: SortOrder

    /**
     * Source provider
     * @type {AuthProvider}
     * @memberof DefaultApiListAuthMigration
     */
    readonly sourceProvider?: AuthProvider

    /**
     * Destination provider
     * @type {AuthProvider}
     * @memberof DefaultApiListAuthMigration
     */
    readonly destinationProvider?: AuthProvider

    /**
     * Status of the migration
     * @type {Array<AuthMigrationStatus>}
     * @memberof DefaultApiListAuthMigration
     */
    readonly status?: Array<AuthMigrationStatus>
}

/**
 * Request parameters for updateAuthMigration operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateAuthMigrationRequest
 */
export interface DefaultApiUpdateAuthMigrationRequest {
    /**
     * Specifies the auth migration ID.
     * @type {string}
     * @memberof DefaultApiUpdateAuthMigration
     */
    readonly id: string

    /**
     * Specifies the update migration request.
     * @type {UpdateMigrationRequest}
     * @memberof DefaultApiUpdateAuthMigration
     */
    readonly updateMigrationRequest: UpdateMigrationRequest
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Create a new auth migration.
     * @summary Create a new auth migration.
     * @param {DefaultApiCreateAuthMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAuthMigration(requestParameters: DefaultApiCreateAuthMigrationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAuthMigration(requestParameters.createMigrationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status of an auth migration.
     * @summary Get the status of an auth migration.
     * @param {DefaultApiGetAuthMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAuthMigration(requestParameters: DefaultApiGetAuthMigrationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAuthMigration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List configured auth methods for the current project environment.
     * @summary List of auth configurations.
     * @param {DefaultApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public list(requestParameters: DefaultApiListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).list(requestParameters.enabled, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all auth migrations.
     * @summary List all auth migrations.
     * @param {DefaultApiListAuthMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAuthMigration(requestParameters: DefaultApiListAuthMigrationRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listAuthMigration(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.sourceProvider, requestParameters.destinationProvider, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the status of an auth migration.
     * @summary Update the status of an auth migration.
     * @param {DefaultApiUpdateAuthMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAuthMigration(requestParameters: DefaultApiUpdateAuthMigrationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAuthMigration(requestParameters.id, requestParameters.updateMigrationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

