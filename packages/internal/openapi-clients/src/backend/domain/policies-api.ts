/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePolicyRequest } from '../models';
// @ts-ignore
import { GasReportListResponse } from '../models';
// @ts-ignore
import { GasReportTransactionIntentsListResponse } from '../models';
// @ts-ignore
import { PolicyBalanceWithdrawResponse } from '../models';
// @ts-ignore
import { PolicyDeleteResponse } from '../models';
// @ts-ignore
import { PolicyListResponse } from '../models';
// @ts-ignore
import { PolicyResponse } from '../models';
// @ts-ignore
import { PolicyResponseExpandable } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { TransactionIntentResponse } from '../models';
// @ts-ignore
import { UpdatePolicyRequest } from '../models';
// @ts-ignore
import { WithdrawalPolicyRequest } from '../models';
/**
 * PoliciesApi - axios parameter creator
 * @export
 */
export const PoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a policy object.
         * @param {CreatePolicyRequest} createPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy: async (createPolicyRequest: CreatePolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPolicyRequest' is not null or undefined
            assertParamExists('createPolicy', 'createPolicyRequest', createPolicyRequest)
            const localVarPath = `/v1/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn\'t use your own deposited tokens in the paymaster.
         * @summary Withdraw tokens collected by policy.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {WithdrawalPolicyRequest} withdrawalPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicyWithdrawal: async (id: string, withdrawalPolicyRequest: WithdrawalPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPolicyWithdrawal', 'id', id)
            // verify required parameter 'withdrawalPolicyRequest' is not null or undefined
            assertParamExists('createPolicyWithdrawal', 'withdrawalPolicyRequest', withdrawalPolicyRequest)
            const localVarPath = `/v1/policies/{id}/withdraw`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(withdrawalPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a policy object.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePolicy', 'id', id)
            const localVarPath = `/v1/policies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable a policy object.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disablePolicy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('disablePolicy', 'id', id)
            const localVarPath = `/v1/policies/{id}/disable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable a policy object.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enablePolicy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('enablePolicy', 'id', id)
            const localVarPath = `/v1/policies/{id}/enable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Policies.  Returns the latest 10 transaction intents for each policy.
         * @summary List policies.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<PolicyResponseExpandable>} [expand] Specifies the fields to expand in the response.
         * @param {string} [name] Specifies the name of the policy.
         * @param {boolean} [deleted] Specifies whether to include deleted policies.
         * @param {number} [chainId] The chain ID of the policy.
         * @param {boolean} [enabled] Specifies whether to include enabled policies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies: async (limit?: number, skip?: number, order?: SortOrder, expand?: Array<PolicyResponseExpandable>, name?: string, deleted?: boolean, chainId?: number, enabled?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of a Policy that has previously been created.  Returns the latest 10 transaction intents that used this policy.
         * @summary Get a policy object.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {Array<PolicyResponseExpandable>} [expand] Specifies the fields to expand.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy: async (id: string, expand?: Array<PolicyResponseExpandable>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPolicy', 'id', id)
            const localVarPath = `/v1/policies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn\'t use your own deposited tokens in the paymaster.
         * @summary Get amount of tokens paid for gas policy.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyBalance: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPolicyBalance', 'id', id)
            const localVarPath = `/v1/policies/{id}/withdraw`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List transaction intents of a policy report.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {number} to The start date of the period in unix timestamp.
         * @param {number} from The end date of the period in unix timestamp.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyReportTransactionIntents: async (id: string, to: number, from: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPolicyReportTransactionIntents', 'id', id)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getPolicyReportTransactionIntents', 'to', to)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getPolicyReportTransactionIntents', 'from', from)
            const localVarPath = `/v1/policies/{id}/reports/transaction_intents`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all gas reports of a policy.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyTotalGasUsage: async (id: string, limit?: number, skip?: number, order?: SortOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPolicyTotalGasUsage', 'id', id)
            const localVarPath = `/v1/policies/{id}/reports`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a policy object.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {UpdatePolicyRequest} updatePolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy: async (id: string, updatePolicyRequest: UpdatePolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePolicy', 'id', id)
            // verify required parameter 'updatePolicyRequest' is not null or undefined
            assertParamExists('updatePolicy', 'updatePolicyRequest', updatePolicyRequest)
            const localVarPath = `/v1/policies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoliciesApi - functional programming interface
 * @export
 */
export const PoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a policy object.
         * @param {CreatePolicyRequest} createPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicy(createPolicyRequest: CreatePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicy(createPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn\'t use your own deposited tokens in the paymaster.
         * @summary Withdraw tokens collected by policy.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {WithdrawalPolicyRequest} withdrawalPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicyWithdrawal(id: string, withdrawalPolicyRequest: WithdrawalPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionIntentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicyWithdrawal(id, withdrawalPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a policy object.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Disable a policy object.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disablePolicy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disablePolicy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Enable a policy object.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enablePolicy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enablePolicy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Policies.  Returns the latest 10 transaction intents for each policy.
         * @summary List policies.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {Array<PolicyResponseExpandable>} [expand] Specifies the fields to expand in the response.
         * @param {string} [name] Specifies the name of the policy.
         * @param {boolean} [deleted] Specifies whether to include deleted policies.
         * @param {number} [chainId] The chain ID of the policy.
         * @param {boolean} [enabled] Specifies whether to include enabled policies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicies(limit?: number, skip?: number, order?: SortOrder, expand?: Array<PolicyResponseExpandable>, name?: string, deleted?: boolean, chainId?: number, enabled?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicies(limit, skip, order, expand, name, deleted, chainId, enabled, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of a Policy that has previously been created.  Returns the latest 10 transaction intents that used this policy.
         * @summary Get a policy object.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {Array<PolicyResponseExpandable>} [expand] Specifies the fields to expand.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicy(id: string, expand?: Array<PolicyResponseExpandable>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicy(id, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn\'t use your own deposited tokens in the paymaster.
         * @summary Get amount of tokens paid for gas policy.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyBalance(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyBalanceWithdrawResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyBalance(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List transaction intents of a policy report.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {number} to The start date of the period in unix timestamp.
         * @param {number} from The end date of the period in unix timestamp.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyReportTransactionIntents(id: string, to: number, from: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GasReportTransactionIntentsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyReportTransactionIntents(id, to, from, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all gas reports of a policy.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyTotalGasUsage(id: string, limit?: number, skip?: number, order?: SortOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GasReportListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyTotalGasUsage(id, limit, skip, order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a policy object.
         * @param {string} id Specifies the unique policy ID (starts with pol_).
         * @param {UpdatePolicyRequest} updatePolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePolicy(id: string, updatePolicyRequest: UpdatePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePolicy(id, updatePolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PoliciesApi - factory interface
 * @export
 */
export const PoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PoliciesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a policy object.
         * @param {PoliciesApiCreatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy(requestParameters: PoliciesApiCreatePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<PolicyResponse> {
            return localVarFp.createPolicy(requestParameters.createPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn\'t use your own deposited tokens in the paymaster.
         * @summary Withdraw tokens collected by policy.
         * @param {PoliciesApiCreatePolicyWithdrawalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicyWithdrawal(requestParameters: PoliciesApiCreatePolicyWithdrawalRequest, options?: AxiosRequestConfig): AxiosPromise<TransactionIntentResponse> {
            return localVarFp.createPolicyWithdrawal(requestParameters.id, requestParameters.withdrawalPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a policy object.
         * @param {PoliciesApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy(requestParameters: PoliciesApiDeletePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<PolicyDeleteResponse> {
            return localVarFp.deletePolicy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable a policy object.
         * @param {PoliciesApiDisablePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disablePolicy(requestParameters: PoliciesApiDisablePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<PolicyResponse> {
            return localVarFp.disablePolicy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable a policy object.
         * @param {PoliciesApiEnablePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enablePolicy(requestParameters: PoliciesApiEnablePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<PolicyResponse> {
            return localVarFp.enablePolicy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Policies.  Returns the latest 10 transaction intents for each policy.
         * @summary List policies.
         * @param {PoliciesApiGetPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies(requestParameters: PoliciesApiGetPoliciesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PolicyListResponse> {
            return localVarFp.getPolicies(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.expand, requestParameters.name, requestParameters.deleted, requestParameters.chainId, requestParameters.enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of a Policy that has previously been created.  Returns the latest 10 transaction intents that used this policy.
         * @summary Get a policy object.
         * @param {PoliciesApiGetPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy(requestParameters: PoliciesApiGetPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<PolicyResponse> {
            return localVarFp.getPolicy(requestParameters.id, requestParameters.expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn\'t use your own deposited tokens in the paymaster.
         * @summary Get amount of tokens paid for gas policy.
         * @param {PoliciesApiGetPolicyBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyBalance(requestParameters: PoliciesApiGetPolicyBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<PolicyBalanceWithdrawResponse> {
            return localVarFp.getPolicyBalance(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List transaction intents of a policy report.
         * @param {PoliciesApiGetPolicyReportTransactionIntentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyReportTransactionIntents(requestParameters: PoliciesApiGetPolicyReportTransactionIntentsRequest, options?: AxiosRequestConfig): AxiosPromise<GasReportTransactionIntentsListResponse> {
            return localVarFp.getPolicyReportTransactionIntents(requestParameters.id, requestParameters.to, requestParameters.from, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all gas reports of a policy.
         * @param {PoliciesApiGetPolicyTotalGasUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyTotalGasUsage(requestParameters: PoliciesApiGetPolicyTotalGasUsageRequest, options?: AxiosRequestConfig): AxiosPromise<GasReportListResponse> {
            return localVarFp.getPolicyTotalGasUsage(requestParameters.id, requestParameters.limit, requestParameters.skip, requestParameters.order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a policy object.
         * @param {PoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy(requestParameters: PoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<PolicyResponse> {
            return localVarFp.updatePolicy(requestParameters.id, requestParameters.updatePolicyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiCreatePolicyRequest
 */
export interface PoliciesApiCreatePolicyRequest {
    /**
     * 
     * @type {CreatePolicyRequest}
     * @memberof PoliciesApiCreatePolicy
     */
    readonly createPolicyRequest: CreatePolicyRequest
}

/**
 * Request parameters for createPolicyWithdrawal operation in PoliciesApi.
 * @export
 * @interface PoliciesApiCreatePolicyWithdrawalRequest
 */
export interface PoliciesApiCreatePolicyWithdrawalRequest {
    /**
     * Specifies the unique policy ID (starts with pol_).
     * @type {string}
     * @memberof PoliciesApiCreatePolicyWithdrawal
     */
    readonly id: string

    /**
     * 
     * @type {WithdrawalPolicyRequest}
     * @memberof PoliciesApiCreatePolicyWithdrawal
     */
    readonly withdrawalPolicyRequest: WithdrawalPolicyRequest
}

/**
 * Request parameters for deletePolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiDeletePolicyRequest
 */
export interface PoliciesApiDeletePolicyRequest {
    /**
     * Specifies the unique policy ID (starts with pol_).
     * @type {string}
     * @memberof PoliciesApiDeletePolicy
     */
    readonly id: string
}

/**
 * Request parameters for disablePolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiDisablePolicyRequest
 */
export interface PoliciesApiDisablePolicyRequest {
    /**
     * Specifies the unique policy ID (starts with pol_).
     * @type {string}
     * @memberof PoliciesApiDisablePolicy
     */
    readonly id: string
}

/**
 * Request parameters for enablePolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiEnablePolicyRequest
 */
export interface PoliciesApiEnablePolicyRequest {
    /**
     * Specifies the unique policy ID (starts with pol_).
     * @type {string}
     * @memberof PoliciesApiEnablePolicy
     */
    readonly id: string
}

/**
 * Request parameters for getPolicies operation in PoliciesApi.
 * @export
 * @interface PoliciesApiGetPoliciesRequest
 */
export interface PoliciesApiGetPoliciesRequest {
    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof PoliciesApiGetPolicies
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof PoliciesApiGetPolicies
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof PoliciesApiGetPolicies
     */
    readonly order?: SortOrder

    /**
     * Specifies the fields to expand in the response.
     * @type {Array<PolicyResponseExpandable>}
     * @memberof PoliciesApiGetPolicies
     */
    readonly expand?: Array<PolicyResponseExpandable>

    /**
     * Specifies the name of the policy.
     * @type {string}
     * @memberof PoliciesApiGetPolicies
     */
    readonly name?: string

    /**
     * Specifies whether to include deleted policies.
     * @type {boolean}
     * @memberof PoliciesApiGetPolicies
     */
    readonly deleted?: boolean

    /**
     * The chain ID of the policy.
     * @type {number}
     * @memberof PoliciesApiGetPolicies
     */
    readonly chainId?: number

    /**
     * Specifies whether to include enabled policies.
     * @type {boolean}
     * @memberof PoliciesApiGetPolicies
     */
    readonly enabled?: boolean
}

/**
 * Request parameters for getPolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiGetPolicyRequest
 */
export interface PoliciesApiGetPolicyRequest {
    /**
     * Specifies the unique policy ID (starts with pol_).
     * @type {string}
     * @memberof PoliciesApiGetPolicy
     */
    readonly id: string

    /**
     * Specifies the fields to expand.
     * @type {Array<PolicyResponseExpandable>}
     * @memberof PoliciesApiGetPolicy
     */
    readonly expand?: Array<PolicyResponseExpandable>
}

/**
 * Request parameters for getPolicyBalance operation in PoliciesApi.
 * @export
 * @interface PoliciesApiGetPolicyBalanceRequest
 */
export interface PoliciesApiGetPolicyBalanceRequest {
    /**
     * Specifies the unique policy ID (starts with pol_).
     * @type {string}
     * @memberof PoliciesApiGetPolicyBalance
     */
    readonly id: string
}

/**
 * Request parameters for getPolicyReportTransactionIntents operation in PoliciesApi.
 * @export
 * @interface PoliciesApiGetPolicyReportTransactionIntentsRequest
 */
export interface PoliciesApiGetPolicyReportTransactionIntentsRequest {
    /**
     * Specifies the unique policy ID (starts with pol_).
     * @type {string}
     * @memberof PoliciesApiGetPolicyReportTransactionIntents
     */
    readonly id: string

    /**
     * The start date of the period in unix timestamp.
     * @type {number}
     * @memberof PoliciesApiGetPolicyReportTransactionIntents
     */
    readonly to: number

    /**
     * The end date of the period in unix timestamp.
     * @type {number}
     * @memberof PoliciesApiGetPolicyReportTransactionIntents
     */
    readonly from: number
}

/**
 * Request parameters for getPolicyTotalGasUsage operation in PoliciesApi.
 * @export
 * @interface PoliciesApiGetPolicyTotalGasUsageRequest
 */
export interface PoliciesApiGetPolicyTotalGasUsageRequest {
    /**
     * Specifies the unique policy ID (starts with pol_).
     * @type {string}
     * @memberof PoliciesApiGetPolicyTotalGasUsage
     */
    readonly id: string

    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof PoliciesApiGetPolicyTotalGasUsage
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof PoliciesApiGetPolicyTotalGasUsage
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof PoliciesApiGetPolicyTotalGasUsage
     */
    readonly order?: SortOrder
}

/**
 * Request parameters for updatePolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiUpdatePolicyRequest
 */
export interface PoliciesApiUpdatePolicyRequest {
    /**
     * Specifies the unique policy ID (starts with pol_).
     * @type {string}
     * @memberof PoliciesApiUpdatePolicy
     */
    readonly id: string

    /**
     * 
     * @type {UpdatePolicyRequest}
     * @memberof PoliciesApiUpdatePolicy
     */
    readonly updatePolicyRequest: UpdatePolicyRequest
}

/**
 * PoliciesApi - object-oriented interface
 * @export
 * @class PoliciesApi
 * @extends {BaseAPI}
 */
export class PoliciesApi extends BaseAPI {
    /**
     * 
     * @summary Create a policy object.
     * @param {PoliciesApiCreatePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public createPolicy(requestParameters: PoliciesApiCreatePolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).createPolicy(requestParameters.createPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn\'t use your own deposited tokens in the paymaster.
     * @summary Withdraw tokens collected by policy.
     * @param {PoliciesApiCreatePolicyWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public createPolicyWithdrawal(requestParameters: PoliciesApiCreatePolicyWithdrawalRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).createPolicyWithdrawal(requestParameters.id, requestParameters.withdrawalPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a policy object.
     * @param {PoliciesApiDeletePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public deletePolicy(requestParameters: PoliciesApiDeletePolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).deletePolicy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable a policy object.
     * @param {PoliciesApiDisablePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public disablePolicy(requestParameters: PoliciesApiDisablePolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).disablePolicy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable a policy object.
     * @param {PoliciesApiEnablePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public enablePolicy(requestParameters: PoliciesApiEnablePolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).enablePolicy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Policies.  Returns the latest 10 transaction intents for each policy.
     * @summary List policies.
     * @param {PoliciesApiGetPoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getPolicies(requestParameters: PoliciesApiGetPoliciesRequest = {}, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).getPolicies(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.expand, requestParameters.name, requestParameters.deleted, requestParameters.chainId, requestParameters.enabled, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of a Policy that has previously been created.  Returns the latest 10 transaction intents that used this policy.
     * @summary Get a policy object.
     * @param {PoliciesApiGetPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getPolicy(requestParameters: PoliciesApiGetPolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).getPolicy(requestParameters.id, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn\'t use your own deposited tokens in the paymaster.
     * @summary Get amount of tokens paid for gas policy.
     * @param {PoliciesApiGetPolicyBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getPolicyBalance(requestParameters: PoliciesApiGetPolicyBalanceRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).getPolicyBalance(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List transaction intents of a policy report.
     * @param {PoliciesApiGetPolicyReportTransactionIntentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getPolicyReportTransactionIntents(requestParameters: PoliciesApiGetPolicyReportTransactionIntentsRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).getPolicyReportTransactionIntents(requestParameters.id, requestParameters.to, requestParameters.from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all gas reports of a policy.
     * @param {PoliciesApiGetPolicyTotalGasUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getPolicyTotalGasUsage(requestParameters: PoliciesApiGetPolicyTotalGasUsageRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).getPolicyTotalGasUsage(requestParameters.id, requestParameters.limit, requestParameters.skip, requestParameters.order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a policy object.
     * @param {PoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public updatePolicy(requestParameters: PoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).updatePolicy(requestParameters.id, requestParameters.updatePolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

