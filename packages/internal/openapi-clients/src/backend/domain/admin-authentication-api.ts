/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthConfig } from '../models';
// @ts-ignore
import { AuthPlayerListResponse } from '../models';
// @ts-ignore
import { AuthPlayerResponse } from '../models';
// @ts-ignore
import { AuthPlayerResponseWithRecoveryShare } from '../models';
// @ts-ignore
import { AuthSessionResponse } from '../models';
// @ts-ignore
import { AuthenticateOAuthRequest } from '../models';
// @ts-ignore
import { Authorize200Response } from '../models';
// @ts-ignore
import { AuthorizePlayerRequest } from '../models';
// @ts-ignore
import { CreateAuthPlayerRequest } from '../models';
// @ts-ignore
import { OAuthConfigListResponse } from '../models';
// @ts-ignore
import { OAuthProvider } from '../models';
// @ts-ignore
import { PlayerResponse } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
/**
 * AdminAuthenticationApi - axios parameter creator
 * @export
 */
export const AdminAuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthorizePlayerRequest} authorizePlayerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize: async (authorizePlayerRequest: AuthorizePlayerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizePlayerRequest' is not null or undefined
            assertParamExists('authorize', 'authorizePlayerRequest', authorizePlayerRequest)
            const localVarPath = `/iam/v1/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorizePlayerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint creates oauth configuration for the current project environment.
         * @summary Create oauth configuration.
         * @param {AuthConfig} body Specifies the oauth provider specific configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body: AuthConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('create', 'body', body)
            const localVarPath = `/iam/v1/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an authenticated player.  The player will be authenticated with the provider and an embedded account can be pre generated.
         * @summary Create an authenticated player.
         * @param {CreateAuthPlayerRequest} createAuthPlayerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthPlayer: async (createAuthPlayerRequest: CreateAuthPlayerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAuthPlayerRequest' is not null or undefined
            assertParamExists('createAuthPlayer', 'createAuthPlayerRequest', createAuthPlayerRequest)
            const localVarPath = `/iam/v1/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAuthPlayerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint creates oauth configuration for the current project environment.
         * @summary Create oauth configuration.
         * @param {AuthConfig} body Specifies the oauth provider specific configuration.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createOAuthConfig: async (body: AuthConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createOAuthConfig', 'body', body)
            const localVarPath = `/iam/v1/oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a player auth object.  It will delete all linked accounts the player is authenticated with. If the player has a linked embedded signer, it will be deleted as well.
         * @summary Deletes a player auth object.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthPlayer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAuthPlayer', 'id', id)
            const localVarPath = `/iam/v1/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint deletes oauth configuration for specified provider for the current project environment.
         * @summary Delete oauth configuration.
         * @param {OAuthProvider} provider Specifies the oauth provider type.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteOAuthConfig: async (provider: OAuthProvider, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('deleteOAuthConfig', 'provider', provider)
            const localVarPath = `/iam/v1/oauth/{provider}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an authenticated player.  Players have linked accounts and are authenticated with a provider.
         * @summary Authenticated player.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthPlayer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAuthPlayer', 'id', id)
            const localVarPath = `/iam/v1/players/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
         * @summary List authenticated players.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {string} [email] Specifies the email address of the user.
         * @param {string} [externalUserId] Specifies the external user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthPlayers: async (limit?: number, skip?: number, order?: SortOrder, email?: string, externalUserId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iam/v1/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (externalUserId !== undefined) {
                localVarQueryParameter['externalUserId'] = externalUserId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint retrieves oauth configuration for specified provider for the current project environment.
         * @summary Get oauth configuration.
         * @param {OAuthProvider} provider Specifies the oauth provider type.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getOAuthConfig: async (provider: OAuthProvider, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('getOAuthConfig', 'provider', provider)
            const localVarPath = `/iam/v1/oauth/{provider}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List configured OAuth methods for the current project environment.
         * @summary List of oauth configurations.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listOAuthConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iam/v1/oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies the token generated by Openfort Auth.
         * @summary Verify auth token.
         * @param {string} token Specifies the auth token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthToken: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('verifyAuthToken', 'token', token)
            const localVarPath = `/iam/v1/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
         * @summary Retrieve player by oauth token.
         * @param {AuthenticateOAuthRequest} authenticateOAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOAuthToken: async (authenticateOAuthRequest: AuthenticateOAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticateOAuthRequest' is not null or undefined
            assertParamExists('verifyOAuthToken', 'authenticateOAuthRequest', authenticateOAuthRequest)
            const localVarPath = `/iam/v1/oauth/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateOAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminAuthenticationApi - functional programming interface
 * @export
 */
export const AdminAuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminAuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthorizePlayerRequest} authorizePlayerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorize(authorizePlayerRequest: AuthorizePlayerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authorize200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorize(authorizePlayerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The endpoint creates oauth configuration for the current project environment.
         * @summary Create oauth configuration.
         * @param {AuthConfig} body Specifies the oauth provider specific configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body: AuthConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates an authenticated player.  The player will be authenticated with the provider and an embedded account can be pre generated.
         * @summary Create an authenticated player.
         * @param {CreateAuthPlayerRequest} createAuthPlayerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthPlayer(createAuthPlayerRequest: CreateAuthPlayerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthPlayerResponseWithRecoveryShare>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthPlayer(createAuthPlayerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The endpoint creates oauth configuration for the current project environment.
         * @summary Create oauth configuration.
         * @param {AuthConfig} body Specifies the oauth provider specific configuration.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async createOAuthConfig(body: AuthConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOAuthConfig(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a player auth object.  It will delete all linked accounts the player is authenticated with. If the player has a linked embedded signer, it will be deleted as well.
         * @summary Deletes a player auth object.
         * @param {string} id Specifies the unique player ID (starts with pla_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthPlayer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthPlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthPlayer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The endpoint deletes oauth configuration for specified provider for the current project environment.
         * @summary Delete oauth configuration.
         * @param {OAuthProvider} provider Specifies the oauth provider type.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async deleteOAuthConfig(provider: OAuthProvider, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOAuthConfig(provider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves an authenticated player.  Players have linked accounts and are authenticated with a provider.
         * @summary Authenticated player.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthPlayer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthPlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthPlayer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
         * @summary List authenticated players.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {string} [email] Specifies the email address of the user.
         * @param {string} [externalUserId] Specifies the external user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthPlayers(limit?: number, skip?: number, order?: SortOrder, email?: string, externalUserId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthPlayerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthPlayers(limit, skip, order, email, externalUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The endpoint retrieves oauth configuration for specified provider for the current project environment.
         * @summary Get oauth configuration.
         * @param {OAuthProvider} provider Specifies the oauth provider type.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getOAuthConfig(provider: OAuthProvider, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOAuthConfig(provider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List configured OAuth methods for the current project environment.
         * @summary List of oauth configurations.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listOAuthConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuthConfigListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOAuthConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verifies the token generated by Openfort Auth.
         * @summary Verify auth token.
         * @param {string} token Specifies the auth token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAuthToken(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAuthToken(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
         * @summary Retrieve player by oauth token.
         * @param {AuthenticateOAuthRequest} authenticateOAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyOAuthToken(authenticateOAuthRequest: AuthenticateOAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyOAuthToken(authenticateOAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminAuthenticationApi - factory interface
 * @export
 */
export const AdminAuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminAuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @param {AdminAuthenticationApiAuthorizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize(requestParameters: AdminAuthenticationApiAuthorizeRequest, options?: AxiosRequestConfig): AxiosPromise<Authorize200Response> {
            return localVarFp.authorize(requestParameters.authorizePlayerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint creates oauth configuration for the current project environment.
         * @summary Create oauth configuration.
         * @param {AdminAuthenticationApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: AdminAuthenticationApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<AuthConfig> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an authenticated player.  The player will be authenticated with the provider and an embedded account can be pre generated.
         * @summary Create an authenticated player.
         * @param {AdminAuthenticationApiCreateAuthPlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthPlayer(requestParameters: AdminAuthenticationApiCreateAuthPlayerRequest, options?: AxiosRequestConfig): AxiosPromise<AuthPlayerResponseWithRecoveryShare> {
            return localVarFp.createAuthPlayer(requestParameters.createAuthPlayerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint creates oauth configuration for the current project environment.
         * @summary Create oauth configuration.
         * @param {AdminAuthenticationApiCreateOAuthConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createOAuthConfig(requestParameters: AdminAuthenticationApiCreateOAuthConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AuthConfig> {
            return localVarFp.createOAuthConfig(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a player auth object.  It will delete all linked accounts the player is authenticated with. If the player has a linked embedded signer, it will be deleted as well.
         * @summary Deletes a player auth object.
         * @param {AdminAuthenticationApiDeleteAuthPlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthPlayer(requestParameters: AdminAuthenticationApiDeleteAuthPlayerRequest, options?: AxiosRequestConfig): AxiosPromise<AuthPlayerResponse> {
            return localVarFp.deleteAuthPlayer(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint deletes oauth configuration for specified provider for the current project environment.
         * @summary Delete oauth configuration.
         * @param {AdminAuthenticationApiDeleteOAuthConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteOAuthConfig(requestParameters: AdminAuthenticationApiDeleteOAuthConfigRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOAuthConfig(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an authenticated player.  Players have linked accounts and are authenticated with a provider.
         * @summary Authenticated player.
         * @param {AdminAuthenticationApiGetAuthPlayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthPlayer(requestParameters: AdminAuthenticationApiGetAuthPlayerRequest, options?: AxiosRequestConfig): AxiosPromise<AuthPlayerResponse> {
            return localVarFp.getAuthPlayer(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
         * @summary List authenticated players.
         * @param {AdminAuthenticationApiGetAuthPlayersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthPlayers(requestParameters: AdminAuthenticationApiGetAuthPlayersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AuthPlayerListResponse> {
            return localVarFp.getAuthPlayers(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.email, requestParameters.externalUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint retrieves oauth configuration for specified provider for the current project environment.
         * @summary Get oauth configuration.
         * @param {AdminAuthenticationApiGetOAuthConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getOAuthConfig(requestParameters: AdminAuthenticationApiGetOAuthConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AuthConfig> {
            return localVarFp.getOAuthConfig(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
        /**
         * List configured OAuth methods for the current project environment.
         * @summary List of oauth configurations.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listOAuthConfig(options?: AxiosRequestConfig): AxiosPromise<OAuthConfigListResponse> {
            return localVarFp.listOAuthConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies the token generated by Openfort Auth.
         * @summary Verify auth token.
         * @param {AdminAuthenticationApiVerifyAuthTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthToken(requestParameters: AdminAuthenticationApiVerifyAuthTokenRequest, options?: AxiosRequestConfig): AxiosPromise<AuthSessionResponse> {
            return localVarFp.verifyAuthToken(requestParameters.token, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
         * @summary Retrieve player by oauth token.
         * @param {AdminAuthenticationApiVerifyOAuthTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOAuthToken(requestParameters: AdminAuthenticationApiVerifyOAuthTokenRequest, options?: AxiosRequestConfig): AxiosPromise<PlayerResponse> {
            return localVarFp.verifyOAuthToken(requestParameters.authenticateOAuthRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authorize operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiAuthorizeRequest
 */
export interface AdminAuthenticationApiAuthorizeRequest {
    /**
     * 
     * @type {AuthorizePlayerRequest}
     * @memberof AdminAuthenticationApiAuthorize
     */
    readonly authorizePlayerRequest: AuthorizePlayerRequest
}

/**
 * Request parameters for create operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiCreateRequest
 */
export interface AdminAuthenticationApiCreateRequest {
    /**
     * Specifies the oauth provider specific configuration.
     * @type {AuthConfig}
     * @memberof AdminAuthenticationApiCreate
     */
    readonly body: AuthConfig
}

/**
 * Request parameters for createAuthPlayer operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiCreateAuthPlayerRequest
 */
export interface AdminAuthenticationApiCreateAuthPlayerRequest {
    /**
     * 
     * @type {CreateAuthPlayerRequest}
     * @memberof AdminAuthenticationApiCreateAuthPlayer
     */
    readonly createAuthPlayerRequest: CreateAuthPlayerRequest
}

/**
 * Request parameters for createOAuthConfig operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiCreateOAuthConfigRequest
 */
export interface AdminAuthenticationApiCreateOAuthConfigRequest {
    /**
     * Specifies the oauth provider specific configuration.
     * @type {AuthConfig}
     * @memberof AdminAuthenticationApiCreateOAuthConfig
     */
    readonly body: AuthConfig
}

/**
 * Request parameters for deleteAuthPlayer operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiDeleteAuthPlayerRequest
 */
export interface AdminAuthenticationApiDeleteAuthPlayerRequest {
    /**
     * Specifies the unique player ID (starts with pla_).
     * @type {string}
     * @memberof AdminAuthenticationApiDeleteAuthPlayer
     */
    readonly id: string
}

/**
 * Request parameters for deleteOAuthConfig operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiDeleteOAuthConfigRequest
 */
export interface AdminAuthenticationApiDeleteOAuthConfigRequest {
    /**
     * Specifies the oauth provider type.
     * @type {OAuthProvider}
     * @memberof AdminAuthenticationApiDeleteOAuthConfig
     */
    readonly provider: OAuthProvider
}

/**
 * Request parameters for getAuthPlayer operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiGetAuthPlayerRequest
 */
export interface AdminAuthenticationApiGetAuthPlayerRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminAuthenticationApiGetAuthPlayer
     */
    readonly id: string
}

/**
 * Request parameters for getAuthPlayers operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiGetAuthPlayersRequest
 */
export interface AdminAuthenticationApiGetAuthPlayersRequest {
    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof AdminAuthenticationApiGetAuthPlayers
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof AdminAuthenticationApiGetAuthPlayers
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof AdminAuthenticationApiGetAuthPlayers
     */
    readonly order?: SortOrder

    /**
     * Specifies the email address of the user.
     * @type {string}
     * @memberof AdminAuthenticationApiGetAuthPlayers
     */
    readonly email?: string

    /**
     * Specifies the external user ID.
     * @type {string}
     * @memberof AdminAuthenticationApiGetAuthPlayers
     */
    readonly externalUserId?: string
}

/**
 * Request parameters for getOAuthConfig operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiGetOAuthConfigRequest
 */
export interface AdminAuthenticationApiGetOAuthConfigRequest {
    /**
     * Specifies the oauth provider type.
     * @type {OAuthProvider}
     * @memberof AdminAuthenticationApiGetOAuthConfig
     */
    readonly provider: OAuthProvider
}

/**
 * Request parameters for verifyAuthToken operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiVerifyAuthTokenRequest
 */
export interface AdminAuthenticationApiVerifyAuthTokenRequest {
    /**
     * Specifies the auth token.
     * @type {string}
     * @memberof AdminAuthenticationApiVerifyAuthToken
     */
    readonly token: string
}

/**
 * Request parameters for verifyOAuthToken operation in AdminAuthenticationApi.
 * @export
 * @interface AdminAuthenticationApiVerifyOAuthTokenRequest
 */
export interface AdminAuthenticationApiVerifyOAuthTokenRequest {
    /**
     * 
     * @type {AuthenticateOAuthRequest}
     * @memberof AdminAuthenticationApiVerifyOAuthToken
     */
    readonly authenticateOAuthRequest: AuthenticateOAuthRequest
}

/**
 * AdminAuthenticationApi - object-oriented interface
 * @export
 * @class AdminAuthenticationApi
 * @extends {BaseAPI}
 */
export class AdminAuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {AdminAuthenticationApiAuthorizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public authorize(requestParameters: AdminAuthenticationApiAuthorizeRequest, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).authorize(requestParameters.authorizePlayerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint creates oauth configuration for the current project environment.
     * @summary Create oauth configuration.
     * @param {AdminAuthenticationApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public create(requestParameters: AdminAuthenticationApiCreateRequest, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an authenticated player.  The player will be authenticated with the provider and an embedded account can be pre generated.
     * @summary Create an authenticated player.
     * @param {AdminAuthenticationApiCreateAuthPlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public createAuthPlayer(requestParameters: AdminAuthenticationApiCreateAuthPlayerRequest, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).createAuthPlayer(requestParameters.createAuthPlayerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint creates oauth configuration for the current project environment.
     * @summary Create oauth configuration.
     * @param {AdminAuthenticationApiCreateOAuthConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public createOAuthConfig(requestParameters: AdminAuthenticationApiCreateOAuthConfigRequest, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).createOAuthConfig(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a player auth object.  It will delete all linked accounts the player is authenticated with. If the player has a linked embedded signer, it will be deleted as well.
     * @summary Deletes a player auth object.
     * @param {AdminAuthenticationApiDeleteAuthPlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public deleteAuthPlayer(requestParameters: AdminAuthenticationApiDeleteAuthPlayerRequest, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).deleteAuthPlayer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint deletes oauth configuration for specified provider for the current project environment.
     * @summary Delete oauth configuration.
     * @param {AdminAuthenticationApiDeleteOAuthConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public deleteOAuthConfig(requestParameters: AdminAuthenticationApiDeleteOAuthConfigRequest, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).deleteOAuthConfig(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an authenticated player.  Players have linked accounts and are authenticated with a provider.
     * @summary Authenticated player.
     * @param {AdminAuthenticationApiGetAuthPlayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public getAuthPlayer(requestParameters: AdminAuthenticationApiGetAuthPlayerRequest, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).getAuthPlayer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
     * @summary List authenticated players.
     * @param {AdminAuthenticationApiGetAuthPlayersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public getAuthPlayers(requestParameters: AdminAuthenticationApiGetAuthPlayersRequest = {}, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).getAuthPlayers(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.email, requestParameters.externalUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint retrieves oauth configuration for specified provider for the current project environment.
     * @summary Get oauth configuration.
     * @param {AdminAuthenticationApiGetOAuthConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public getOAuthConfig(requestParameters: AdminAuthenticationApiGetOAuthConfigRequest, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).getOAuthConfig(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List configured OAuth methods for the current project environment.
     * @summary List of oauth configurations.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public listOAuthConfig(options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).listOAuthConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies the token generated by Openfort Auth.
     * @summary Verify auth token.
     * @param {AdminAuthenticationApiVerifyAuthTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public verifyAuthToken(requestParameters: AdminAuthenticationApiVerifyAuthTokenRequest, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).verifyAuthToken(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
     * @summary Retrieve player by oauth token.
     * @param {AdminAuthenticationApiVerifyOAuthTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminAuthenticationApi
     */
    public verifyOAuthToken(requestParameters: AdminAuthenticationApiVerifyOAuthTokenRequest, options?: AxiosRequestConfig) {
        return AdminAuthenticationApiFp(this.configuration).verifyOAuthToken(requestParameters.authenticateOAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

