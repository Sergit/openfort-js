/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import axios, { type AxiosInstance } from 'axios';
import axiosRetry, { type IAxiosRetryConfig } from 'axios-retry';

export interface RetryConfig {
  retries?: number;
  retryDelay?: number;
  retryCondition?: (error: any) => boolean;
  onRetry?: (retryCount: number, error: any, requestConfig: any) => void;
}

/**
 * Configures axios with retry logic
 * @param axiosInstance - The axios instance to configure (defaults to global axios)
 * @param retryConfig - Configuration for retry behavior
 * @returns The configured axios instance
 */
export function configureAxiosWithRetry(
  axiosInstance: AxiosInstance = axios,
  retryConfig: RetryConfig = {}
): AxiosInstance {
  const {
    retries = 3,
    retryDelay = 1000,
    retryCondition,
    onRetry,
  } = retryConfig;

  // Configure retry logic
  const retryOptions: IAxiosRetryConfig = {
    retries,
    retryDelay: (retryCount: number) => {
      // Exponential backoff with jitter
      const delay = retryDelay * Math.pow(2, retryCount - 1);
      const jitter = Math.random() * 0.1 * delay;
      return delay + jitter;
    },
    retryCondition: retryCondition || ((error) => {
      // Retry on network errors, 5xx server errors, and specific 4xx errors
      const isNetworkError = !error.response;
      const isServerError = error.response && error.response.status >= 500;
      const isRetryableClientError = error.response && 
        [408, 429, 502, 503, 504].includes(error.response.status);
      
      return Boolean(isNetworkError || isServerError || isRetryableClientError);
    }),
    onRetry,
  };

  // Apply retry logic to the axios instance
  axiosRetry(axiosInstance, retryOptions);

  return axiosInstance;
}

/**
 * Configure the global axios instance with retry logic
 * This should be called once during application initialization
 */
export function setupGlobalAxiosRetry(retryConfig: RetryConfig = {}): void {
  configureAxiosWithRetry(axios, retryConfig);
}

/**
 * Creates a new axios instance with retry logic
 * @param retryConfig - Configuration for retry behavior
 * @returns New AxiosInstance with retry logic applied
 */
export function createAxiosInstanceWithRetry(retryConfig: RetryConfig = {}): AxiosInstance {
  const axiosInstance = axios.create();
  return configureAxiosWithRetry(axiosInstance, retryConfig);
} 